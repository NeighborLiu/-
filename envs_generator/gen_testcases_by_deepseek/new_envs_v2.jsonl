{"name": "search_arxiv", "description": "Searches the arXiv.org database for academic papers based on specified criteria.", "parameters": {"type": "object", "properties": {"query": {"type": "string", "description": "The search query terms (e.g., 'quantum computing', 'machine learning')."}, "max_results": {"type": "integer", "description": "The maximum number of results to return (default: 10, max: 1000)."}, "start": {"type": "integer", "description": "The starting index for pagination (used for large result sets)."}, "sort_by": {"type": "string", "description": "Field to sort results by (e.g., 'relevance', 'lastUpdatedDate', 'submittedDate')."}, "category": {"type": "array", "items": {"type": "string", "description": "Category code (e.g., 'cs.AI', 'math.QA')"}, "description": "List of categories to filter the search results."}}, "required": ["query"]}, "returns": [{"name": "results", "type": "array", "description": "List of paper entries. Each entry includes title, authors, abstract, submit date, categories, and arXiv ID."}], "exceptions": [{"name": "InvalidQueryException", "description": "The query parameter is empty or contains invalid characters."}, {"name": "APIErrorException", "description": "An error occurred communicating with the arXiv API (e.g., network issues or invalid response)."}], "toolkit_name": "ArxivToolkit"}
{"name": "download_arxiv_paper", "description": "Download an academic paper from arXiv by its ID in a specified format.", "parameters": {"type": "object", "properties": {"id": {"type": "string", "description": "The arXiv ID of the paper (e.g., '1234.56789')."}, "format": {"type": "string", "description": "The desired format (e.g., 'pdf', 'ps', 'other'). Defaults to 'pdf' if not provided."}, "directory": {"type": "string", "description": "The local directory path where the paper will be saved."}, "overwrite": {"type": "boolean", "description": "Whether to overwrite the file if it already exists in the directory. Defaults to false."}}, "required": ["id", "directory"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean), 'file_path' (string, the path where the file was saved if successful), and 'error_message' (string, if any error occurred)."}], "exceptions": [{"name": "InvalidArxivIDException", "description": "The provided arXiv ID is invalid or does not exist."}, {"name": "DirectoryNotFoundException", "description": "The specified directory does not exist or is inaccessible."}, {"name": "DownloadFailedException", "description": "Failed to download the paper due to network issues or server errors."}, {"name": "InvalidFormatException", "description": "The specified format is not supported by arXiv."}], "toolkit_name": "ArxivToolkit"}
{"name": "fetch_news", "description": "Retrieves news articles based on a search query.", "parameters": {"type": "object", "properties": {"query": {"type": "string", "description": "The search query to find relevant news articles."}, "count": {"type": "integer", "description": "The maximum number of articles to return (default is 10)."}, "start_date": {"type": "string", "description": "The start date for filtering articles (format: 'YYYY-MM-DD')."}, "end_date": {"type": "string", "description": "The end date for filtering articles (format: 'YYYY-MM-DD')."}, "categories": {"type": "array", "description": "Filter articles by category (e.g., 'technology', 'sports').", "items": {"type": "string", "description": "A category name to filter the articles."}}}, "required": ["query"]}, "returns": [{"name": "articles", "type": "array", "description": "An array of articles, each containing 'title', 'content', 'source', 'date', and 'url'."}], "exceptions": [{"name": "InvalidQueryException", "description": "The query parameter is empty or invalid."}, {"name": "InvalidDateException", "description": "The start_date or end_date is in an invalid format, or the start_date is after the end_date."}, {"name": "APIUnavailableException", "description": "The AskNews API is currently unavailable or returned an error."}], "toolkit_name": "AskNewsToolkit"}
{"name": "search_news_stories", "description": "Searches for news articles and stories based on a user query using the AskNews API.", "parameters": {"type": "object", "properties": {"query": {"type": "string", "description": "The search query to find relevant news articles."}, "category": {"type": "string", "description": "Optional category to filter results (e.g., 'technology', 'politics')."}, "limit": {"type": "integer", "description": "Maximum number of results to return (default is 10 if omitted)."}}, "required": ["query"]}, "returns": [{"name": "results", "type": "array", "description": "An array of news items. Each item contains 'title', 'content', 'source', 'url', and 'published_at' (date string)."}], "exceptions": [{"name": "InvalidQueryException", "description": "Thrown if the 'query' parameter is empty or contains invalid characters."}, {"name": "APIErrorException", "description": "Thrown if the AskNews API returns an error (e.g., network issue, rate limit exceeded)."}], "toolkit_name": "AskNewsToolkit"}
{"name": "analyze_audio", "description": "Transcribes the provided audio file and answers a specific question about its content.", "parameters": {"type": "object", "properties": {"audio_path": {"type": "string", "description": "Path to the audio file to be analyzed."}, "question": {"type": "string", "description": "The question to answer based on the audio content."}, "language": {"type": "string", "description": "Language of the audio content (optional, default: 'en')."}}, "required": ["audio_path", "question"]}, "returns": [{"name": "analysis_result", "type": "object", "description": "Contains 'transcription' (string) of the audio content and 'answer' (string) to the provided question."}], "exceptions": [{"name": "InvalidAudioPathException", "description": "The provided audio path is invalid, inaccessible, or does not exist."}, {"name": "AudioProcessingException", "description": "An error occurred during audio processing, such as unsupported format, transcription failure, or question analysis error."}], "toolkit_name": "AudioAnalysisToolkit"}
{"name": "transcribe_audio", "description": "Transcribes audio content into text and provides confidence scores for the transcription.", "parameters": {"type": "object", "properties": {"audio_path": {"type": "string", "description": "The file path or URL of the audio to transcribe."}, "language": {"type": "string", "description": "The language code of the audio content (e.g., 'en' for English, 'es' for Spanish)."}, "output_format": {"type": "string", "description": "The desired output format (either 'json' for structured data or 'text' for plain text)."}}, "required": ["audio_path"]}, "returns": [{"name": "transcription_result", "type": "object", "description": "An object containing 'text' (string: the transcribed text), 'confidence_score' (number between 0 and 1: the model's confidence in the transcription), and 'format' (string: the output format used)."}], "exceptions": [{"name": "InvalidAudioPathException", "description": "The provided audio path is invalid, inaccessible, or not in a supported format (e.g., .wav, .mp3)."}, {"name": "UnsupportedLanguageException", "description": "The specified language is not supported by the transcription service."}, {"name": "TranscriptionErrorException", "description": "An error occurred during the transcription process, such as model failure or audio corruption."}], "toolkit_name": "AudioAnalysisToolkit"}
{"name": "answer_audio_question", "description": "Answers a question based on the content of an audio file.", "parameters": {"type": "object", "properties": {"audio_path": {"type": "string", "description": "The path to the audio file to analyze."}, "question": {"type": "string", "description": "The question to answer about the audio content."}, "language": {"type": "string", "description": "The language of the audio content (e.g., 'en' for English)."}}, "required": ["audio_path", "question"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'answer' (string, the answer to the question) and 'confidence' (number between 0 and 1 indicating the model's confidence in the answer)."}], "exceptions": [{"name": "InvalidAudioException", "description": "The audio file is corrupted or in an unsupported format."}, {"name": "EmptyQuestionException", "description": "The question parameter is empty or contains only whitespace."}, {"name": "ProcessingErrorException", "description": "An unexpected error occurred during audio analysis."}], "toolkit_name": "AudioAnalysisToolkit"}
{"name": "summarize_audio", "description": "Generates a textual summary of the content in an audio file.", "parameters": {"type": "object", "properties": {"audio_path": {"type": "string", "description": "The file path or URL of the audio to summarize."}, "duration": {"type": "number", "description": "Optional duration (in seconds) to limit the summary to the first N seconds of audio."}, "include_timestamps": {"type": "boolean", "description": "Whether to include timestamps in the summary (marks key points in the audio)."}}, "required": ["audio_path"]}, "returns": [{"name": "summary", "type": "string", "description": "The generated text summary of the audio content."}, {"name": "timestamps", "type": "array", "description": "Array of timestamps (seconds) marking key points in the audio, if 'include_timestamps' was enabled."}], "exceptions": [{"name": "InvalidAudioPathException", "description": "The provided 'audio_path' is invalid, inaccessible, or does not point to an audio file."}, {"name": "UnsupportedAudioFormatException", "description": "The audio format is not supported (e.g., not WAV, MP3, or FLAC)."}, {"name": "AudioProcessingException", "description": "An error occurred during audio analysis (e.g., silence detection failure or corrupted audio data)."}], "toolkit_name": "AudioAnalysisToolkit"}
{"name": "enhance_audio", "description": "Enhances the quality of an audio file by applying noise reduction, normalization, or other audio processing techniques.", "parameters": {"type": "object", "properties": {"audio_path": {"type": "string", "description": "The path to the input audio file."}, "noise_reduction": {"type": "boolean", "description": "Whether to apply noise reduction. Defaults to true if not specified."}, "normalization": {"type": "boolean", "description": "Whether to normalize the audio volume. Defaults to false."}, "target_level": {"type": "number", "description": "The target volume level in dB for normalization. Required if normalization is enabled."}, "bitrate": {"type": "integer", "description": "The desired bitrate in kbps for the output file. Must be a positive integer."}, "output_format": {"type": "string", "description": "The desired output format (e.g., 'mp3', 'wav'). Defaults to the input file's format."}}, "required": ["audio_path"]}, "returns": [{"name": "enhanced_audio_path", "type": "string", "description": "The path to the enhanced audio file."}, {"name": "processing_summary", "type": "object", "description": "Summary of the processing steps applied, including parameters used and any metrics like SNR improvement."}], "exceptions": [{"name": "InvalidAudioFileException", "description": "The input audio file could not be processed (invalid format, corrupted, etc.)."}, {"name": "UnsupportedFormatException", "description": "The specified output format is not supported by the tool."}], "toolkit_name": "AudioAnalysisToolkit"}
{"name": "navigate_to_url", "description": "Navigates the browser to a specified URL.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "The URL to navigate to."}, "timeout": {"type": "integer", "description": "The maximum time in seconds to wait for the page to load."}}, "required": ["url"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean), 'current_url' (string, the actual URL after navigation), and 'error' (string, if any error occurred)."}], "exceptions": [{"name": "InvalidURLException", "description": "The provided URL is invalid or cannot be parsed."}, {"name": "TimeoutException", "description": "The page took longer than the specified timeout to load."}], "toolkit_name": "BrowserToolkit"}
{"name": "extract_element_text", "description": "Extracts text content from web elements matching a specified CSS selector on the current page.", "parameters": {"type": "object", "properties": {"selector": {"type": "string", "description": "CSS selector to match elements."}, "timeout": {"type": "number", "description": "Maximum time to wait for elements in milliseconds. Defaults to 5000 if not provided."}, "all_text": {"type": "boolean", "description": "Whether to return all matched elements' text combined (true) or just the first (false). Defaults to false."}}, "required": ["selector"]}, "returns": [{"name": "result", "type": "object", "description": "Contains 'success' (boolean), 'text' (string or array of strings), and 'error_message' (string if unsuccessful)."}], "exceptions": [{"name": "InvalidSelectorException", "description": "The provided CSS selector is invalid or cannot be parsed."}, {"name": "TimeoutException", "description": "No elements matching the selector were found within the specified timeout period."}], "toolkit_name": "BrowserToolkit"}
{"name": "click_element", "description": "Simulates a click on a specified HTML element using a selector and location method.", "parameters": {"type": "object", "properties": {"selector": {"type": "string", "description": "The selector string used to locate the element (e.g., CSS selector, XPath)."}, "by": {"type": "string", "description": "The method to locate the element, such as 'css', 'xpath', 'id', or 'name'."}}, "required": ["selector", "by"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean indicating if the click was successful) and 'error_message' (string describing any error that occurred)."}], "exceptions": [{"name": "ElementNotFoundException", "description": "The element specified by the selector and by parameters was not found on the current page."}, {"name": "InvalidSelectorException", "description": "The selector or the method to locate the element is invalid or not supported."}], "toolkit_name": "BrowserToolkit"}
{"name": "take_screenshot", "description": "Capture a screenshot of the current webpage.", "parameters": {"type": "object", "properties": {"file_path": {"type": "string", "description": "The local file path where the screenshot will be saved."}, "full_page": {"type": "boolean", "description": "Whether to capture the entire webpage (including scrollable areas) instead of just the visible viewport. Defaults to false."}}, "required": ["file_path"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean), 'saved_path' (string, the actual path where the screenshot was saved if successful), and 'error_message' (string, if unsuccessful)."}], "exceptions": [{"name": "IOException", "description": "Thrown when the file path is invalid, not writable, or an error occurs during the screenshot saving process."}], "toolkit_name": "BrowserToolkit"}
{"name": "execute_code", "description": "Execute code in a specified sandbox environment such as Python, Jupyter, Docker, subprocess, or e2b.", "parameters": {"type": "object", "properties": {"code": {"type": "string", "description": "The code to execute."}, "environment": {"type": "string", "description": "The execution environment (e.g., 'python', 'jupyter', 'docker', 'subprocess', 'e2b')."}, "timeout_seconds": {"type": "integer", "description": "The maximum time allowed in seconds before timing out."}, "memory_limit_mb": {"type": "integer", "description": "The memory limit in megabytes for the execution."}, "working_directory": {"type": "string", "description": "The working directory path for the execution."}}, "required": ["code", "environment"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean), 'stdout' (string), 'stderr' (string), and 'exit_code' (integer) from the execution."}], "exceptions": [{"name": "InvalidEnvironmentError", "description": "The specified execution environment is invalid or not supported."}, {"name": "ExecutionTimeoutError", "description": "The code execution exceeded the specified timeout duration."}, {"name": "ResourceLimitExceededError", "description": "The execution exceeded the allocated memory or resource limits."}], "toolkit_name": "CodeExecutionToolkit"}
{"name": "run_code_in_sandbox", "description": "Executes user-provided code in a selected sandbox environment (e.g., Python, Jupyter, Docker) with configurable resource limits and timeout settings.", "parameters": {"type": "object", "properties": {"code": {"type": "string", "description": "The source code to execute in the target environment."}, "environment": {"type": "string", "description": "The sandbox environment type (e.g., 'python', 'jupyter', 'docker', 'subprocess', 'e2b')."}, "timeout_seconds": {"type": "number", "description": "Maximum allowed runtime for the code execution in seconds."}, "capture_output": {"type": "boolean", "description": "Whether to capture stdout/stderr from the execution."}, "resource_limits": {"type": "object", "description": "Optional resource constraints for memory and CPU usage.", "properties": {"memory_mb": {"type": "number", "description": "Maximum allowed memory in megabytes."}, "cpu_cores": {"type": "number", "description": "Maximum CPU cores allowed (e.g., 0.5 for half a core)."}}}}, "required": ["code", "environment"]}, "returns": [{"name": "execution_result", "type": "object", "description": "Contains execution status, captured output/error messages, and resource usage metrics."}], "exceptions": [{"name": "UnsupportedEnvironment", "description": "Thrown when the requested environment is not supported by the sandbox."}, {"name": "InvalidCodeFormat", "description": "Occurs if the code is malformed for the selected environment (e.g., syntax errors)."}, {"name": "ExecutionTimeoutExceeded", "description": "Raised when the code execution exceeds the configured timeout limit."}, {"name": "ResourceLimitViolation", "description": "Triggered if the code consumes more resources than allowed by the specified limits."}], "toolkit_name": "CodeExecutionToolkit"}
{"name": "run_code_sandboxed", "description": "Executes code in a specified sandboxed environment such as Python, Jupyter, Docker, or subprocess.", "parameters": {"type": "object", "properties": {"code": {"type": "string", "description": "The code to execute in the specified environment."}, "environment": {"type": "string", "description": "The sandboxed environment to use (e.g., 'python', 'jupyter', 'docker', 'subprocess', 'e2b')."}, "timeout": {"type": "number", "description": "The maximum time in seconds to allow execution before timing out."}, "working_dir": {"type": "string", "description": "The working directory for the code execution."}, "env_vars": {"type": "object", "description": "Environment variables to set as key-value pairs."}, "stdin": {"type": "string", "description": "Input to be provided to the code's standard input."}}, "required": ["code", "environment"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'output' (string), 'error' (string), 'exit_code' (integer), and 'timed_out' (boolean)."}], "exceptions": [{"name": "InvalidEnvironmentException", "description": "The specified environment is not supported or invalid."}, {"name": "ExecutionTimeoutException", "description": "The code execution exceeded the specified timeout."}, {"name": "CodeExecutionException", "description": "An unexpected error occurred during code execution."}], "toolkit_name": "CodeExecutionToolkit"}
{"name": "execute_code_sandbox", "description": "Execute code in a secure sandboxed environment with support for multiple runtime types.", "parameters": {"type": "object", "properties": {"code": {"type": "string", "description": "The source code to execute"}, "sandbox_type": {"type": "string", "description": "Type of execution environment (python, jupyter, docker, subprocess, e2b)"}, "environment": {"type": "object", "description": "(Optional) Key-value pairs of environment variables for the sandbox", "additionalProperties": {"type": "string"}}, "timeout": {"type": "number", "description": "(Optional) Maximum execution time in seconds (defaults to 30)"}}, "required": ["code", "sandbox_type"]}, "returns": [{"name": "execution_result", "type": "object", "description": "Contains 'output' (string), 'error' (string if failed), and 'exit_code' (integer)"}], "exceptions": [{"name": "InvalidSandboxTypeException", "description": "Thrown when sandbox_type is not one of the supported environments"}, {"name": "ExecutionTimeoutException", "description": "Thrown when code execution exceeds specified timeout"}, {"name": "PermissionDeniedException", "description": "Thrown when the requested sandbox type requires elevated permissions not available"}], "toolkit_name": "CodeExecutionToolkit"}
{"name": "generate_image", "description": "Generate an image based on a text prompt using OpenAI's DALL-E model.", "parameters": {"type": "object", "properties": {"prompt": {"type": "string", "description": "The text prompt describing the desired image."}, "n": {"type": "integer", "description": "Number of images to generate (1-10). Default is 1."}, "size": {"type": "string", "description": "Resolution of the image (e.g., '1024x1024'). Valid options are '256x256', '512x512', or '1024x1024'. Default is '1024x1024'."}, "response_format": {"type": "string", "description": "Format of the image data. Either 'url' (publicly accessible URL) or 'b64_json' (base64-encoded string). Default is 'url'."}}, "required": ["prompt"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'images' (array of URLs or base64 strings), 'success' (boolean), and 'error_message' (string if not successful)."}], "exceptions": [{"name": "InvalidPromptException", "description": "The 'prompt' is empty, exceeds the maximum length, or contains invalid characters."}, {"name": "InvalidParameterException", "description": "The 'n' is outside 1-10, 'size' is not a valid resolution, or 'response_format' is not 'url' or 'b64_json'."}, {"name": "APICommunicationException", "description": "Failed to communicate with the OpenAI API due to network issues or API key errors."}], "toolkit_name": "DalleToolkit"}
{"name": "generate_image_batch", "description": "Generate multiple images based on a text prompt using the DALL-E model.", "parameters": {"type": "object", "properties": {"prompt": {"type": "string", "description": "Text prompt describing the desired image."}, "n": {"type": "integer", "description": "Number of images to generate (minimum 1, maximum 10)."}, "size": {"type": "string", "description": "Image size in pixels, formatted as 'widthxheight' (e.g., '1024x1024'). Valid sizes are 256x256, 512x512, or 1024x1024."}, "response_format": {"type": "string", "description": "Format of the response. Either 'url' (returns image URLs) or 'b64_json' (returns base64-encoded images in JSON). Defaults to 'url'."}}, "required": ["prompt", "size"]}, "returns": [{"name": "result", "type": "object", "description": "Contains 'images' (array of image URLs or base64 data), 'success' (boolean indicating success), and 'error' (string if an error occurred)."}], "exceptions": [{"name": "InvalidParameterException", "description": "The 'size' parameter is invalid or not one of the allowed values (256x256, 512x512, 1024x1024)."}, {"name": "InvalidRequestException", "description": "The 'prompt' is empty or exceeds the maximum allowed length (e.g., 1000 characters)."}, {"name": "RateLimitExceededError", "description": "The number of requests exceeds the API's rate limit."}], "toolkit_name": "DalleToolkit"}
{"name": "generate_image_variations", "description": "Generates multiple variations of an image based on a given prompt and parameters.", "parameters": {"type": "object", "properties": {"prompt": {"type": "string", "description": "The main text prompt describing the desired image."}, "variations_count": {"type": "integer", "description": "The number of image variations to generate."}, "creativity_level": {"type": "number", "description": "A value between 0 and 1 indicating the creativity level of variations. Higher values produce more diverse results."}, "excluded_elements": {"type": "array", "items": {"type": "string", "description": "Elements to exclude from the generated images."}, "description": "List of elements to avoid in the images."}}, "required": ["prompt", "variations_count"]}, "returns": [{"name": "result", "type": "object", "description": "Contains 'images' (array of URLs to the generated images), 'success' (boolean), and 'error_message' (string if any)."}], "exceptions": [{"name": "InvalidParameterException", "description": "Thrown if 'creativity_level' is not between 0 and 1, or 'variations_count' is negative."}, {"name": "InvalidPromptException", "description": "Thrown if the provided 'prompt' is empty or contains invalid content."}], "toolkit_name": "DalleToolkit"}
{"name": "edit_image", "description": "Modify an existing image based on a text prompt using DALL-E's capabilities.", "parameters": {"type": "object", "properties": {"image": {"type": "string", "description": "Path or URL of the source image to be edited."}, "prompt": {"type": "string", "description": "Text description of the desired edits to apply to the image."}, "mask": {"type": "string", "description": "(Optional) Path or URL to a binary mask image defining the region to edit."}, "size": {"type": "object", "description": "Desired output image dimensions (width and height in pixels).", "properties": {"width": {"type": "integer", "description": "Target width of the edited image."}, "height": {"type": "integer", "description": "Target height of the edited image."}}, "required": ["width", "height"]}}, "required": ["image", "prompt"]}, "returns": [{"name": "edited_image", "type": "string", "description": "URL or path to the generated edited image file."}], "exceptions": [{"name": "InvalidImageException", "description": "The provided image path/URL is invalid, corrupted, or not compatible with DALL-E processing."}, {"name": "IncompatibleDimensionsException", "description": "The requested 'size' dimensions are out of DALL-E's supported range (e.g., exceeding maximum pixel limits)."}], "toolkit_name": "DalleToolkit"}
{"name": "upscale_image", "description": "Upscale the resolution of an existing image using DALL-E's enhancement capabilities.", "parameters": {"type": "object", "properties": {"image_base64": {"type": "string", "description": "Base64-encoded string of the input image to be upscaled."}, "target_width": {"type": "integer", "description": "The desired width in pixels of the upscaled image."}, "target_height": {"type": "integer", "description": "The desired height in pixels of the upscaled image."}}, "required": ["image_base64", "target_width", "target_height"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'image_base64' (string, the upscaled image in base64 format), 'success' (boolean, indicates if the operation was successful), and 'error_message' (string, provides details if unsuccessful)."}], "exceptions": [{"name": "InvalidImageFormatException", "description": "The input image's base64 string is invalid or cannot be decoded."}, {"name": "InvalidDimensionsException", "description": "The target_width or target_height parameters are non-positive, or exceed the maximum allowed dimensions."}], "toolkit_name": "DalleToolkit"}
{"name": "fetch_real_time_data", "description": "Fetches real-time data and AI recommendations for specified verticals such as News, Finance, Stock Market, Sports, and Weather using the Dappier API.", "parameters": {"type": "object", "properties": {"vertical": {"type": "string", "description": "The vertical to query (e.g., 'News', 'Finance', 'Stock Market', 'Sports', 'Weather')."}, "query": {"type": "string", "description": "Optional specific query term (e.g., stock ticker, team name)."}, "time_frame": {"type": "string", "description": "Time frame for data (e.g., 'latest', '24h', 'week')."}}, "required": ["vertical"]}, "returns": [{"name": "result", "type": "object", "description": "Contains 'data' (object) with real-time information and 'recommendations' (array of objects) with AI-driven suggestions related to the query."}], "exceptions": [{"name": "InvalidVerticalException", "description": "The specified vertical is not supported by the Dappier API."}, {"name": "APIServiceUnavailableException", "description": "The Dappier API is currently unavailable or returned an unexpected error."}, {"name": "NoDataAvailableException", "description": "No real-time data or recommendations were found matching the query parameters."}], "toolkit_name": "DappierToolkit"}
{"name": "get_ai_recommendations", "description": "Retrieves AI-generated recommendations based on real-time data from specified verticals such as News, Finance, Sports, and Weather.", "parameters": {"type": "object", "properties": {"vertical": {"type": "string", "description": "The data vertical to fetch recommendations from (e.g., 'Finance', 'Sports', 'News')."}, "query": {"type": "string", "description": "(Optional) A search term to refine recommendations (e.g., 'Apple stock' or 'NBA scores')."}, "time_frame": {"type": "integer", "description": "(Optional) Number of hours to look back for real-time data (default is 24)."}, "max_results": {"type": "integer", "description": "(Optional) Maximum number of recommendations to return (default is 5)."}}, "required": ["vertical"]}, "returns": [{"name": "recommendations", "type": "array", "description": "An array of recommendation objects containing 'title', 'content', 'source', and 'vertical' fields for each item."}], "exceptions": [{"name": "InvalidVerticalException", "description": "Thrown when the specified 'vertical' parameter is not supported or invalid."}, {"name": "APIServiceError", "description": "Thrown if the Dappier API service is unavailable or returns an error."}], "toolkit_name": "DappierToolkit"}
{"name": "get_vertical_insights", "description": "Fetches real-time data and AI-generated insights for a specific query within a chosen vertical (e.g., News, Finance, Sports).", "parameters": {"type": "object", "properties": {"query": {"type": "string", "description": "The search term or topic to analyze (e.g., 'Apple earnings', 'World Cup final')."}, "vertical": {"type": "string", "description": "The domain to focus on (e.g., 'News', 'Finance', 'Stock Market', 'Sports', 'Weather')."}, "time_range": {"type": "string", "description": "Time frame for real-time data (options: 'latest', '24h', '7d'). Defaults to 'latest'."}, "include_recommendations": {"type": "boolean", "description": "Whether to include AI-driven recommendations (e.g., buy/sell signals for stocks, optimal strategies for sports)."}, "user_preferences": {"type": "object", "description": "User-specific parameters (e.g., {'risk_tolerance': 'high'} for finance, {'sport': 'soccer'} for sports)."}}, "required": ["query", "vertical"]}, "returns": [{"name": "result", "type": "object", "description": "Contains 'real_time_data' (array of data points like headlines/stock prices) and 'ai_recommendations' (array of suggestions with confidence scores). Each data point includes source, content, and timestamp."}], "exceptions": [{"name": "InvalidVerticalException", "description": "The specified vertical is unsupported (e.g., 'Movies' is not a valid vertical)."}, {"name": "NoDataAvailableException", "description": "No real-time data exists for the query within the selected vertical."}, {"name": "APIRequestException", "description": "The Dappier API returned an error (e.g., authentication failure or rate limit exceeded)."}], "toolkit_name": "DappierToolkit"}
{"name": "execute_sparql_query", "description": "Executes a SPARQL query against the Data Commons knowledge graph and returns results.", "parameters": {"type": "object", "properties": {"query": {"type": "string", "description": "The SPARQL query string to execute."}, "timeout": {"type": "integer", "description": "Optional timeout in seconds for the query execution."}, "inference": {"type": "boolean", "description": "Whether to enable reasoning/inference during query execution."}}, "required": ["query"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'data' (array of query results), 'metadata' (query statistics like execution time), and 'variables' (list of variable names in the result set)."}], "exceptions": [{"name": "InvalidQueryException", "description": "The SPARQL query is syntactically invalid or references non-existent entities."}, {"name": "TimeoutException", "description": "The query execution exceeded the specified timeout duration."}, {"name": "ServiceUnavailableException", "description": "The Data Commons knowledge graph service is temporarily unavailable."}], "toolkit_name": "DataCommonsToolkit"}
{"name": "get_statistical_time_series", "description": "Retrieve time series data for a statistical variable and location from the Data Commons knowledge graph.", "parameters": {"type": "object", "properties": {"variable": {"type": "string", "description": "The Data Commons statistical variable identifier (e.g., 'Count_Person')"}, "place": {"type": "string", "description": "The Data Commons place identifier (e.g., 'geoId/06001' for a US county)"}, "startYear": {"type": "integer", "description": "The starting year of the time series (optional, defaults to earliest available data)"}, "endYear": {"type": "integer", "description": "The ending year of the time series (optional, defaults to latest available data)"}, "statType": {"type": "string", "description": "The type of statistical value to return (e.g., 'measuredValue', 'populationWithinPlace')"}}, "required": ["variable", "place"]}, "returns": [{"name": "time_series", "type": "array", "description": "An array of objects containing year-value pairs for the requested statistical data"}], "exceptions": [{"name": "InvalidVariableException", "description": "The specified variable does not exist or is not a valid statistical variable in Data Commons"}, {"name": "PlaceNotFoundException", "description": "The specified place identifier could not be found in the Data Commons knowledge graph"}, {"name": "InvalidDateRangeException", "description": "The requested startYear/endYear combination is invalid or outside the available data range"}], "toolkit_name": "DataCommonsToolkit"}
{"name": "analyze_entity_properties", "description": "Analyze the properties and characteristics of an entity in the Data Commons knowledge graph.", "parameters": {"type": "object", "properties": {"entity_id": {"type": "string", "description": "The unique identifier of the entity to analyze."}, "property_filter": {"type": "array", "description": "A list of specific property names to include in the analysis. If omitted, all properties are returned.", "items": {"type": "string", "description": "A property name to filter on (e.g., 'population', 'area')."}}, "include_time_series": {"type": "boolean", "description": "Whether to include time-series data for statistical properties. Defaults to false."}}, "required": ["entity_id"]}, "returns": [{"name": "entity_properties", "type": "object", "description": "An object containing the entity's analyzed properties. Includes an array of properties with their names, types, values, and optional time-series data if requested."}], "exceptions": [{"name": "EntityNotFoundException", "description": "The specified entity_id does not exist in the Data Commons knowledge graph."}, {"name": "InvalidParameterException", "description": "Invalid parameter input (e.g., invalid property names in property_filter or malformed parameters)."}], "toolkit_name": "DataCommonsToolkit"}
{"name": "search_entities", "description": "Search the Data Commons knowledge graph for entities matching specified criteria.", "parameters": {"type": "object", "properties": {"query": {"type": "string", "description": "Search term or keyword to match entity names or descriptions."}, "entity_type": {"type": "string", "description": "Type of entity to search for (e.g., 'Place', 'Company', 'Person')."}, "property_filters": {"type": "array", "description": "List of property-value pairs to filter entities by.", "items": {"type": "object", "properties": {"property": {"type": "string", "description": "Name of the property to filter (e.g., 'population', 'name')."}, "value": {"type": "string", "description": "Value to match for the property."}}}}, "limit": {"type": "integer", "description": "Maximum number of results to return (default: 10)."}}, "required": ["query"]}, "returns": [{"name": "entities", "type": "array", "description": "List of matched entities. Each entity includes 'dcid' (string, unique identifier), 'name' (string, entity name), and 'type' (string, entity type)."}], "exceptions": [{"name": "InvalidRequestException", "description": "The 'query' parameter is empty, or 'property_filters' contain invalid or non-existent properties."}, {"name": "DataNotFoundException", "description": "No entities were found matching the search criteria."}], "toolkit_name": "DataCommonsToolkit"}
{"name": "excel_to_markdown", "description": "Converts an Excel file into a markdown table.", "parameters": {"type": "object", "properties": {"file_path": {"type": "string", "description": "Path to the Excel file to be converted."}, "sheet": {"type": "string", "description": "Name or index of the sheet to convert. If omitted, the first sheet is used."}, "header_rows": {"type": "integer", "description": "Number of rows to treat as headers. Defaults to 1 if omitted."}, "include_formatting": {"type": "boolean", "description": "Whether to include markdown formatting such as pipes and borders. Defaults to true."}}, "required": ["file_path"]}, "returns": [{"name": "markdown_table", "type": "string", "description": "The generated markdown table representation of the Excel sheet."}], "exceptions": [{"name": "FileNotFoundError", "description": "The specified Excel file does not exist or could not be accessed."}, {"name": "SheetNotFoundException", "description": "The specified sheet name or index does not exist in the Excel file."}, {"name": "ConversionError", "description": "An error occurred during the conversion process, such as invalid data formatting."}], "toolkit_name": "ExcelToolkit"}
{"name": "excel_sheets_to_markdown", "description": "Converts selected sheets from an Excel file into markdown tables with optional formatting options.", "parameters": {"type": "object", "properties": {"file_path": {"type": "string", "description": "The local file path to the Excel (.xlsx/.xls) file."}, "sheet_names": {"type": "array", "description": "List of sheet names to convert. If omitted, all sheets are processed.", "items": {"type": "string", "description": "Name of a specific sheet to convert"}}, "include_headers": {"type": "boolean", "description": "Whether the first row should be treated as headers (default: true)"}, "trim_whitespace": {"type": "boolean", "description": "Remove extra whitespace from cell contents (default: false)"}}, "required": ["file_path"]}, "returns": [{"name": "markdown_tables", "type": "array", "description": "Array of objects containing 'sheet_name' (string) and 'markdown' (string) for each converted sheet."}], "exceptions": [{"name": "FileNotFoundError", "description": "The specified Excel file does not exist at the provided path."}, {"name": "SheetNotFound", "description": "One or more specified sheet names do not exist in the Excel file."}, {"name": "InvalidFormatError", "description": "The file is not a valid Excel file or contains unsupported formatting."}], "toolkit_name": "ExcelToolkit"}
{"name": "excel_filter_to_markdown", "description": "Converts an Excel sheet to a markdown table with optional row filtering based on specified criteria.", "parameters": {"type": "object", "properties": {"input_file": {"type": "string", "description": "The path to the Excel file to process."}, "sheet_name": {"type": "string", "description": "The name of the sheet to convert. Defaults to the first sheet if omitted."}, "filter": {"type": "object", "description": "Filter criteria to select rows. Requires 'column', 'operator', and 'value'.", "properties": {"column": {"type": "string", "description": "The column name to filter on."}, "operator": {"type": "string", "description": "The comparison operator (e.g., 'equals', 'contains', 'starts with', 'ends with')."}, "value": {"type": "string", "description": "The value to compare against in the filter."}}, "required": ["column", "operator", "value"]}, "include_header": {"type": "boolean", "description": "Whether to include the header row in the output. Defaults to true."}}, "required": ["input_file"]}, "returns": [{"name": "markdown_table", "type": "string", "description": "The generated markdown table containing filtered or unfiltered data from the Excel sheet."}], "exceptions": [{"name": "FileNotFoundError", "description": "The specified Excel file does not exist."}, {"name": "InvalidSheetError", "description": "The specified sheet name does not exist in the Excel file."}, {"name": "InvalidFilterException", "description": "The filter parameters are missing required fields or have invalid values."}], "toolkit_name": "ExcelToolkit"}
{"name": "create_function_tool", "description": "Define a new function-based tool with schema validation and synthesis capabilities for OpenAI chat models to call.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The unique name of the function tool."}, "description": {"type": "string", "description": "A brief description of what the function tool does."}, "parameters": {"type": "object", "description": "Parameter schema defining the inputs accepted by the function tool.", "properties": {"parameter_name": {"type": "object", "description": "Parameter schema definition (nested structure for each parameter)."}}, "additionalProperties": {"type": "object", "properties": {"type": {"type": "string", "description": "Data type of the parameter (e.g., 'integer', 'string')."}, "description": {"type": "string", "description": "Description of the parameter's purpose."}}, "required": ["type", "description"]}}, "required": {"type": "array", "description": "List of parameter names that are required for the function tool.", "items": {"type": "string"}}, "returns": {"type": "array", "description": "List of return objects defining the output structure of the function tool.", "items": {"type": "object", "properties": {"name": {"type": "string", "description": "Name of the return value."}, "type": {"type": "string", "description": "Data type of the return value."}, "description": {"type": "string", "description": "Description of the return value."}}, "required": ["name", "type", "description"]}}, "exceptions": {"type": "array", "description": "List of exception objects defining possible errors from the function tool.", "items": {"type": "object", "properties": {"name": {"type": "string", "description": "Name of the exception."}, "description": {"type": "string", "description": "Description of the exception scenario."}}, "required": ["name", "description"]}}}, "required": ["name", "description", "parameters", "returns"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean), 'tool_id' (string if successful), and 'error_message' (string if failed)."}], "exceptions": [{"name": "InvalidFunctionSchemaException", "description": "Thrown when the provided parameters, returns, or exceptions schema is invalid or missing required fields."}], "toolkit_name": "FunctionTool"}
{"name": "define_custom_function", "description": "Define a new custom function with specified parameters and return type for use by chat models.", "parameters": {"type": "object", "properties": {"function_name": {"type": "string", "description": "The name of the custom function to define."}, "parameters": {"type": "object", "description": "An object where each key is a parameter name. Each value is an object with 'type' (string: 'integer', 'number', 'boolean', 'string', or 'array') and 'description' (string) for that parameter."}, "returns": {"type": "object", "description": "An object containing 'type' (string) and 'description' (string) specifying the function's return type and purpose."}}, "required": ["function_name", "parameters", "returns"]}, "returns": [{"name": "result", "type": "object", "description": "Contains 'success' (boolean), 'function_id' (string: unique identifier if successful), and 'error_message' (string: details if unsuccessful)."}], "exceptions": [{"name": "FunctionAlreadyDefinedException", "description": "The specified function name already exists in the system."}, {"name": "InvalidParameterSchemaException", "description": "The provided parameters schema is invalid (e.g., missing 'type' or 'description' for a parameter)."}, {"name": "InvalidReturnSchemaException", "description": "The provided return schema is invalid (e.g., missing 'type' or 'description')."}], "toolkit_name": "FunctionTool"}
{"name": "register_function", "description": "Registers a new function with the system, specifying its parameters and return type.", "parameters": {"type": "object", "properties": {"function_name": {"type": "string", "description": "The name of the function to register."}, "description": {"type": "string", "description": "A brief description of the function's purpose and behavior."}, "parameters": {"type": "object", "description": "An object where each key is a parameter name, and each value is an object with 'type' (string) and 'description' (string)."}, "return_type": {"type": "string", "description": "The data type of the return value (e.g., 'string', 'integer')."}}, "required": ["function_name", "parameters", "return_type"]}, "returns": [{"name": "result", "type": "object", "description": "Contains 'success' (boolean), 'function_id' (string if successful), and 'error_message' (string if unsuccessful)."}], "exceptions": [{"name": "FunctionRegistrationError", "description": "Thrown if the function name is already registered, parameters are invalid (e.g., missing type or description), or return_type is invalid."}], "toolkit_name": "FunctionTool"}
{"name": "define_function_schema", "description": "Define a new function schema for use by OpenAI chat models, specifying parameters, returns, and exceptions.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The name of the function to be defined."}, "description": {"type": "string", "description": "Optional description of the function's purpose."}, "parameters": {"type": "object", "description": "Schema defining the parameters the function accepts.", "properties": {"properties": {"type": "object", "description": "An object mapping parameter names to their schema definitions (type and description)."}, "required": {"type": "array", "items": {"type": "string", "description": "The name of a required parameter."}, "description": "List of parameter names that are required."}}, "required": ["properties", "required"]}, "returns": {"type": "array", "description": "The return values schema for the function.", "items": {"type": "object", "properties": {"name": {"type": "string", "description": "The name of the return value."}, "type": {"type": "string", "description": "The data type of the return value (e.g., integer, object)."}, "description": {"type": "string", "description": "A brief description of the return value."}}, "required": ["name", "type", "description"]}}, "exceptions": {"type": "array", "description": "The exceptions that the function may raise.", "items": {"type": "object", "properties": {"name": {"type": "string", "description": "The exception name."}, "description": {"type": "string", "description": "A brief description of the exception."}}, "required": ["name", "description"]}}}, "required": ["name", "parameters", "returns"]}, "returns": [{"name": "result", "type": "object", "description": "Contains 'success' (boolean) indicating if the schema was created, 'schema_id' (string) on success, or 'error_message' (string) on failure."}], "exceptions": [{"name": "InvalidSchemaException", "description": "The provided parameters, returns, or exceptions schema is invalid (e.g., missing required fields, invalid types)."}], "toolkit_name": "FunctionTool"}
{"name": "file_write", "description": "Write text to a file, creating it if it doesn't exist.", "parameters": {"type": "object", "properties": {"file_path": {"type": "string", "description": "The path to the file to write to."}, "content": {"type": "string", "description": "The text content to write into the file."}, "append": {"type": "boolean", "description": "If true, appends the content to the file; otherwise, overwrites it."}}, "required": ["file_path", "content"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean indicating success), 'bytes_written' (integer, number of bytes written if successful), and 'error_message' (string if unsuccessful)."}], "exceptions": [{"name": "InvalidFilePathException", "description": "The provided file path is invalid, empty, or not writable."}, {"name": "FileWriteException", "description": "An error occurred while writing to the file, such as insufficient permissions or disk space."}], "toolkit_name": "FileWriteTool"}
{"name": "append_to_file", "description": "Appends or writes text content to a specified file.", "parameters": {"type": "object", "properties": {"file_path": {"type": "string", "description": "The path to the file to write to or append."}, "content": {"type": "string", "description": "The text content to be written or appended."}, "mode": {"type": "string", "description": "The operation mode: 'append' to add to the end of the file, or 'write' to overwrite the file. Defaults to 'append'."}}, "required": ["file_path", "content"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean indicating success), 'bytes_written' (integer, the number of bytes written if successful), and 'error_message' (string, if unsuccessful)."}], "exceptions": [{"name": "FileAccessError", "description": "Thrown when the file cannot be accessed due to invalid path, permissions, or other system issues."}, {"name": "InvalidModeError", "description": "Thrown when the 'mode' parameter is not 'append' or 'write'."}], "toolkit_name": "FileWriteTool"}
{"name": "write_file_with_encoding", "description": "Write text content to a file with specified encoding, creating it if needed or overwriting if allowed.", "parameters": {"type": "object", "properties": {"file_path": {"type": "string", "description": "The path to the file to write."}, "content": {"type": "string", "description": "The text content to write into the file."}, "encoding": {"type": "string", "description": "The character encoding to use (e.g., 'utf-8', 'latin-1'). Defaults to 'utf-8'."}, "overwrite": {"type": "boolean", "description": "Whether to overwrite the file if it already exists. Defaults to false."}}, "required": ["file_path", "content"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean), 'bytes_written' (integer, if successful), and 'error_message' (string, if any)."}], "exceptions": [{"name": "FileOperationException", "description": "Thrown if the file cannot be written (e.g., invalid path, no permissions, or cannot overwrite an existing file without the 'overwrite' flag)."}, {"name": "InvalidEncodingException", "description": "Thrown if the specified encoding is not supported."}], "toolkit_name": "FileWriteTool"}
{"name": "create_file_and_write", "description": "Creates a file and writes text content to it, optionally creating parent directories.", "parameters": {"type": "object", "properties": {"file_path": {"type": "string", "description": "The full path to the file to create or write to."}, "content": {"type": "string", "description": "The text content to write into the file."}, "encoding": {"type": "string", "description": "The character encoding to use, defaulting to 'utf-8'."}, "create_dirs": {"type": "boolean", "description": "Whether to create parent directories if they don't exist. Defaults to false."}, "overwrite": {"type": "boolean", "description": "Whether to overwrite the file if it already exists. Defaults to true."}}, "required": ["file_path", "content"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean), 'bytes_written' (number), and 'error_message' (string if unsuccessful)."}], "exceptions": [{"name": "InvalidPathException", "description": "Thrown if the provided file path is invalid or cannot be accessed."}, {"name": "DirectoryCreationError", "description": "Thrown if parent directories cannot be created when 'create_dirs' is enabled."}, {"name": "AccessDeniedException", "description": "Thrown if the user lacks permission to write to the file or directory."}, {"name": "FileExistsException", "description": "Thrown if the file already exists and 'overwrite' is set to false."}], "toolkit_name": "FileWriteTool"}
{"name": "insert_text_at_position", "description": "Inserts text into a file at a specific position.", "parameters": {"type": "object", "properties": {"file_path": {"type": "string", "description": "The path to the file where text will be inserted."}, "text": {"type": "string", "description": "The text content to insert into the file."}, "position": {"type": "integer", "description": "The byte position where the text should be inserted. Must be between 0 and the current file length."}}, "required": ["file_path", "text", "position"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean indicating success), 'bytes_written' (integer, the number of bytes inserted), and 'error_message' (string, if unsuccessful)."}], "exceptions": [{"name": "FileDoesNotExistException", "description": "The specified file does not exist or the path is invalid."}, {"name": "InvalidPositionException", "description": "The position is negative or exceeds the current file length."}], "toolkit_name": "FileWriteTool"}
{"name": "get_issues", "description": "Retrieve issues from a specified GitHub repository.", "parameters": {"type": "object", "properties": {"owner": {"type": "string", "description": "The GitHub username or organization name of the repository owner."}, "repo_name": {"type": "string", "description": "The name of the GitHub repository."}, "state": {"type": "string", "description": "The state of the issues to retrieve (open, closed, or both). Defaults to open."}, "labels": {"type": "array", "items": {"type": "string"}, "description": "A list of label names to filter the issues by."}, "sort": {"type": "string", "description": "Field used to sort the issues (e.g., created, updated, etc.)."}, "order": {"type": "string", "description": "Sort order (asc for ascending, desc for descending)."}}, "required": ["owner", "repo_name"]}, "returns": [{"name": "issues", "type": "array", "description": "An array of issue objects, each containing details like title, number, state, labels, and creation time."}], "exceptions": [{"name": "RepositoryNotFoundException", "description": "The specified repository does not exist or could not be accessed."}, {"name": "InvalidParameterException", "description": "One or more parameters are invalid (e.g., invalid state value, non-existent repository)."}], "toolkit_name": "GitHubToolkit"}
{"name": "create_pull_request", "description": "Create a new pull request in a GitHub repository.", "parameters": {"type": "object", "properties": {"owner": {"type": "string", "description": "The GitHub username or organization name of the repository owner."}, "repo": {"type": "string", "description": "The name of the GitHub repository."}, "title": {"type": "string", "description": "The title of the pull request."}, "head": {"type": "string", "description": "The branch containing your changes (e.g., 'feature-branch')."}, "base": {"type": "string", "description": "The branch you want the changes pulled into (e.g., 'main')."}, "body": {"type": "string", "description": "Optional description of the pull request."}, "draft": {"type": "boolean", "description": "Whether the pull request should be created as a draft."}}, "required": ["owner", "repo", "title", "head", "base"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean), 'pull_request_url' (string, if successful), and 'error_message' (string, if unsuccessful)."}], "exceptions": [{"name": "InvalidRepositoryException", "description": "The repository specified by 'owner' and 'repo' does not exist, or the user lacks access permissions."}, {"name": "BranchNotFoundException", "description": "The 'head' or 'base' branch does not exist in the specified repository."}], "toolkit_name": "GitHubToolkit"}
{"name": "search_issues", "description": "Search for issues across GitHub repositories based on specific criteria such as keywords, labels, and state.", "parameters": {"type": "object", "properties": {"query": {"type": "string", "description": "The search query string using GitHub's issue search syntax (e.g., 'is:issue label:bug')."}, "owner": {"type": "string", "description": "The GitHub username of the repository owner."}, "repo": {"type": "string", "description": "The name of the repository."}, "state": {"type": "string", "description": "The state of the issues to retrieve (open, closed, or all)."}, "labels": {"type": "array", "items": {"type": "string", "description": "Label name to filter by."}, "description": "List of labels to filter issues by."}}, "required": ["query"]}, "returns": [{"name": "issues", "type": "array", "description": "List of issues matching the search criteria. Each issue object contains details such as title, number, state, body, and labels."}], "exceptions": [{"name": "InvalidSearchQueryException", "description": "The provided search query is invalid or uses an unsupported syntax."}], "toolkit_name": "GitHubToolkit"}
{"name": "list_repositories", "description": "Retrieve a list of repositories for a specified GitHub user or organization.", "parameters": {"type": "object", "properties": {"username": {"type": "string", "description": "The GitHub username or organization name whose repositories are to be listed."}, "visibility": {"type": "string", "description": "Filter repositories by visibility: 'public', 'private', 'internal', or 'all'."}, "affiliation": {"type": "array", "description": "Filter repositories by affiliation. Valid values: 'owner', 'collaborator', 'organization_member'.", "items": {"type": "string", "description": "Affiliation type for filtering repositories."}}}, "required": ["username"]}, "returns": [{"name": "repositories", "type": "array", "description": "An array of repository objects containing details like name, description, visibility, and URL."}], "exceptions": [{"name": "InvalidUsernameException", "description": "The specified username does not exist or the API could not retrieve repositories for it."}, {"name": "APIRequestException", "description": "An error occurred while interacting with the GitHub API (e.g., rate limit exceeded, network issues)."}], "toolkit_name": "GitHubToolkit"}
{"name": "get_elevation", "description": "Retrieves elevation data for a specific geographic coordinate.", "parameters": {"type": "object", "properties": {"latitude": {"type": "number", "description": "The latitude coordinate of the location (range: -90 to 90)."}, "longitude": {"type": "number", "description": "The longitude coordinate of the location (range: -180 to 180)."}}, "required": ["latitude", "longitude"]}, "returns": [{"name": "elevation_data", "type": "object", "description": "An object containing 'elevation' (number in meters), 'location' (object with input coordinates), and 'unit' (string, e.g., 'meters')."}], "exceptions": [{"name": "InvalidCoordinateException", "description": "Thrown when latitude or longitude are outside valid ranges or non-numeric values."}, {"name": "ServiceErrorException", "description": "Thrown when the Google Elevation API returns an error (e.g., network issue or service unavailability)."}], "toolkit_name": "GoogleMapsToolkit"}
{"name": "get_timezone", "description": "Retrieves timezone information for a specified geographic location and timestamp.", "parameters": {"type": "object", "properties": {"latitude": {"type": "number", "description": "Geographic latitude in degrees (-90 to 90)."}, "longitude": {"type": "number", "description": "Geographic longitude in degrees (-180 to 180)."}, "timestamp": {"type": "number", "description": "The timestamp (in milliseconds since the Unix epoch) for which to retrieve timezone data."}}, "required": ["latitude", "longitude", "timestamp"]}, "returns": [{"name": "timezone_data", "type": "object", "description": "Contains 'timezone_id' (string, the IANA timezone identifier), 'utc_offset' (integer, the offset from UTC in seconds), and 'dst_offset' (integer, the daylight saving offset in seconds)."}], "exceptions": [{"name": "InvalidCoordinatesException", "description": "Thrown if the latitude is outside the range [-90, 90] or the longitude is outside [-180, 180]."}, {"name": "InvalidTimestampException", "description": "Thrown if the timestamp is not a valid Unix timestamp (e.g., negative or too far in the future)."}], "toolkit_name": "GoogleMapsToolkit"}
{"name": "validate_address", "description": "Validates and returns detailed information about a specified address using Google Maps Geocoding API.", "parameters": {"type": "object", "properties": {"address": {"type": "string", "description": "The address string to validate (e.g., '1600 Amphitheatre Parkway, Mountain View, CA')."}, "components": {"type": "object", "description": "Optional component filters (e.g., {'country': 'US'} to restrict results to a specific country)."}, "language": {"type": "string", "description": "Preferred language for the response (e.g., 'en' for English)."}}, "required": ["address"]}, "returns": [{"name": "result", "type": "object", "description": "Validated address details including 'formatted_address' (string), 'latitude' (number), 'longitude' (number), and 'address_components' (array of objects with type, long_name, short_name). Returns null if validation fails."}], "exceptions": [{"name": "InvalidAddressException", "description": "Thrown when the input address cannot be resolved to a valid location or required parameters are missing."}], "toolkit_name": "GoogleMapsToolkit"}
{"name": "get_directions", "description": "Get directions between two locations.", "parameters": {"type": "object", "properties": {"start_address": {"type": "string", "description": "The starting address for the directions."}, "end_address": {"type": "string", "description": "The destination address for the directions."}, "travel_mode": {"type": "string", "description": "The mode of travel (e.g., 'driving', 'walking', 'bicycling', 'transit'). Defaults to 'driving' if not provided."}}, "required": ["start_address", "end_address"]}, "returns": [{"name": "directions", "type": "object", "description": "Contains 'success' (boolean indicating success), 'distance' (number in kilometers), 'duration' (number in minutes), 'steps' (array of strings with step-by-step directions), and 'error_message' (string if an error occurred)."}], "exceptions": [{"name": "InvalidAddressException", "description": "One or both addresses are invalid or cannot be geocoded."}, {"name": "NoRouteFoundException", "description": "No valid route could be found between the specified addresses."}, {"name": "InvalidTravelModeException", "description": "The specified travel mode is not supported."}], "toolkit_name": "GoogleMapsToolkit"}
{"name": "search_author_publications", "description": "Search for an author's publications and retrieve their details from Google Scholar.", "parameters": {"type": "object", "properties": {"author_name": {"type": "string", "description": "The name of the author to search for."}, "query": {"type": "string", "description": "Optional search query to refine the publications (e.g., specific keywords)."}, "start": {"type": "integer", "description": "The starting index for pagination (default is 0)."}, "number_of_results": {"type": "integer", "description": "The number of publications to retrieve (default is 10)."}, "include_citations": {"type": "boolean", "description": "Whether to include citation information in the results (default is false)."}}, "required": ["author_name"]}, "returns": [{"name": "result", "type": "object", "description": "Includes 'publications' (array of publication details containing title, authors, citation count, year, and URL) and 'total_results' (integer indicating the total number found)."}], "exceptions": [{"name": "InvalidAuthorNameException", "description": "The provided author name is empty or contains invalid characters."}, {"name": "ServiceUnavailableException", "description": "The Google Scholar service is currently unavailable."}, {"name": "InvalidParameterException", "description": "One or more parameters (e.g., 'start' or 'number_of_results') have invalid values (e.g., negative numbers)."}], "toolkit_name": "GoogleScholarToolkit"}
{"name": "search_publications_by_author", "description": "Search for academic publications authored by a specific researcher, optionally filtered by keywords.", "parameters": {"type": "object", "properties": {"author_name": {"type": "string", "description": "Full name of the author to search publications for"}, "keywords": {"type": "array", "description": "List of keywords to filter publications by", "items": {"type": "string", "description": "Keyword to match publication titles/abstracts"}}, "limit": {"type": "integer", "description": "Maximum number of publications to return (default: 10)"}}, "required": ["author_name"]}, "returns": [{"name": "publications", "type": "array", "description": "List of publication entries containing title (string), authors (array), citation_count (integer), year (integer), and source (string)"}], "exceptions": [{"name": "InvalidAuthorNameException", "description": "The provided author name is invalid or cannot be identified in Google Scholar database"}, {"name": "NoPublicationsFoundException", "description": "No publications were found for the given author and/or keywords"}], "toolkit_name": "GoogleScholarToolkit"}
{"name": "get_author_profile", "description": "Retrieves detailed profile information of an author from Google Scholar, including citation metrics and publications.", "parameters": {"type": "object", "properties": {"author_name": {"type": "string", "description": "The full name of the author to search for."}, "affiliation": {"type": "string", "description": "(Optional) The author's affiliation to narrow down the search results."}}, "required": ["author_name"]}, "returns": [{"name": "author_profile", "type": "object", "description": "An object containing 'author_id' (string), 'citation_count' (integer), 'h_index' (integer), 'i10_index' (integer), and 'publications' (array of objects with 'title' (string) and 'year' (integer)). Returns empty if no profile is found."}], "exceptions": [{"name": "AuthorNotFoundException", "description": "No author profile matches the provided parameters."}, {"name": "InvalidParameterException", "description": "The 'author_name' parameter is empty or invalid."}, {"name": "ServiceUnavailableException", "description": "Failed to connect to the Google Scholar service or encountered an API error."}], "toolkit_name": "GoogleScholarToolkit"}
{"name": "search_publications_by_keyword", "description": "Search for academic publications by keywords and retrieve details such as titles, authors, and citation counts.", "parameters": {"type": "object", "properties": {"keywords": {"type": "array", "items": {"type": "string", "description": "A keyword or phrase to search for."}, "description": "List of keywords to search for in publications."}, "limit": {"type": "integer", "description": "Maximum number of publications to return (default is 10)."}, "start_year": {"type": "integer", "description": "Earliest publication year to include in results."}, "end_year": {"type": "integer", "description": "Latest publication year to include in results."}}, "required": ["keywords"]}, "returns": [{"name": "publications", "type": "array", "description": "List of publications matching the search criteria. Each entry contains 'title' (string), 'authors' (array of strings), 'year' (integer), 'citation_count' (integer), and 'url' (string)."}], "exceptions": [{"name": "InvalidParameterException", "description": "Thrown if 'keywords' is empty, 'start_year' exceeds 'end_year', or any year is invalid."}, {"name": "ServiceError", "description": "Occurs when the Google Scholar service is unavailable or returns an error."}], "toolkit_name": "GoogleScholarToolkit"}
{"name": "get_citation_data", "description": "Retrieve citation metrics for a specific publication from Google Scholar.", "parameters": {"type": "object", "properties": {"publication_id": {"type": "string", "description": "The unique identifier of the publication to analyze."}, "since_year": {"type": "integer", "description": "Optional start year to calculate citations from (e.g., 2015)."}, "include_citation_history": {"type": "boolean", "description": "Whether to return annual citation counts in addition to total."}}, "required": ["publication_id"]}, "returns": [{"name": "citation_metrics", "type": "object", "description": "Contains 'total_citations' (integer), and optionally 'annual_citations' (array of objects with 'year' and 'count' properties)."}], "exceptions": [{"name": "PublicationNotFoundException", "description": "The specified publication_id does not exist in Google Scholar database."}, {"name": "InvalidParameterException", "description": "Invalid parameter format (e.g., non-integer since_year value)."}], "toolkit_name": "GoogleScholarToolkit"}
{"name": "collect_human_feedback", "description": "Collect human feedback on a model's output for iterative improvement.", "parameters": {"type": "object", "properties": {"task_id": {"type": "string", "description": "Unique identifier for the task requiring human feedback."}, "model_output": {"type": "string", "description": "The model's output that needs human evaluation."}, "context": {"type": "object", "description": "Additional context (e.g., metadata, instructions) provided to the human evaluator."}, "feedback_options": {"type": "array", "items": {"type": "string"}, "description": "List of possible feedback options the human can select from (e.g., 'Correct', 'Incorrect', 'Unclear')."}, "timeout": {"type": "integer", "description": "Maximum time in seconds to wait for feedback before returning an error."}}, "required": ["task_id", "model_output"]}, "returns": [{"name": "feedback_data", "type": "object", "description": "An object containing 'response' (the human's feedback text or selected option), 'rating' (optional numerical score from 1-5), 'timestamp' (when feedback was submitted), and 'timeout_occurred' (boolean indicating if the feedback was provided before the timeout)."}], "exceptions": [{"name": "TaskNotFoundException", "description": "The provided 'task_id' does not correspond to a registered task in the system."}, {"name": "FeedbackTimeoutException", "description": "No feedback was received within the specified 'timeout' period."}, {"name": "InvalidFeedbackFormatException", "description": "The human's feedback could not be parsed (e.g., selected an invalid option outside the 'feedback_options' list)."}], "toolkit_name": "HumanToolkit"}
{"name": "gather_user_preferences", "description": "Collect structured user preferences or ratings to refine AI model outputs interactively.", "parameters": {"type": "object", "properties": {"options": {"type": "array", "description": "List of possible choices presented to the user", "items": {"type": "string", "description": "Individual option text"}}, "prompt_message": {"type": "string", "description": "Custom instruction message to guide user selection"}, "allow_other": {"type": "boolean", "description": "Whether to allow free-text input for custom responses"}}, "required": ["options", "prompt_message"]}, "returns": [{"name": "user_response", "type": "object", "description": "Contains 'selected_option' (string), 'other_response' (string if allow_other is true), and 'timestamp' (ISO 8601 string)"}], "exceptions": [{"name": "InvalidInputException", "description": "Thrown when options array is empty, prompt_message is missing, or parameters have invalid types"}], "toolkit_name": "HumanToolkit"}
{"name": "request_user_choice", "description": "Presents multiple options to a user and requests a selection.", "parameters": {"type": "object", "properties": {"options": {"type": "array", "items": {"type": "string"}, "description": "List of options presented to the user."}, "prompt": {"type": "string", "description": "Message prompting the user to choose from the options."}, "allow_multiple": {"type": "boolean", "description": "Whether the user can select multiple options. Defaults to false if not provided."}, "timeout": {"type": "number", "description": "Maximum time to wait for a response in seconds. If not provided, the tool will wait indefinitely."}, "default_option": {"type": "string", "description": "The default option to select if the user does not respond. Must be one of the options provided."}}, "required": ["options"]}, "returns": [{"name": "result", "type": "object", "description": "Contains 'selection' (array of selected options), 'status' (string: 'success', 'timeout', or 'error'), and 'error_message' (string if status is 'error')."}], "exceptions": [{"name": "InvalidOptionsException", "description": "The 'options' parameter must be a non-empty array of strings."}, {"name": "InvalidDefaultOptionException", "description": "The 'default_option' must be one of the options provided."}, {"name": "InvalidTimeoutException", "description": "The 'timeout' parameter must be a non-negative number."}], "toolkit_name": "HumanToolkit"}
{"name": "analyze_image", "description": "Analyzes an image to identify objects, text, colors, and other visual elements using vision models.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file to be analyzed."}, "analysis_type": {"type": "array", "items": {"type": "string", "description": "Supported analysis types: 'objects', 'text', 'colors', 'tags'."}, "description": "List of analysis types to perform on the image."}, "include_metadata": {"type": "boolean", "description": "Whether to include image metadata (e.g., dimensions, format) in the results. Defaults to false."}, "detailed": {"type": "boolean", "description": "Whether to return detailed information for each analysis result (e.g., bounding boxes for objects). Defaults to false."}}, "required": ["image_path", "analysis_type"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean), 'results' (object with analysis data structured by analysis type), and 'error_message' (string if unsuccessful)."}], "exceptions": [{"name": "InvalidImageException", "description": "The image file could not be read or is invalid (e.g., corrupted or unsupported format)."}, {"name": "InvalidAnalysisTypeException", "description": "One or more analysis types in the 'analysis_type' parameter are invalid or not supported."}], "toolkit_name": "ImageAnalysisToolkit"}
{"name": "image_insight_generator", "description": "Generates detailed visual insights from an image using advanced vision analysis techniques.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "File path or URL of the input image to analyze"}, "analysis_type": {"type": "array", "description": "Specifies the type(s) of analysis to perform (objects, colors, text, scenes)", "items": {"type": "string", "enum": ["objects", "colors", "text", "scenes"]}}, "detailed": {"type": "boolean", "description": "Whether to return extended analysis details (default: false)"}}, "required": ["image_path"]}, "returns": [{"name": "analysis_report", "type": "object", "description": "Structured analysis results containing detected elements, dominant colors, text extracts, and scene descriptions based on requested analysis types"}, {"name": "image_metadata", "type": "object", "description": "Technical metadata including image dimensions, format, and resolution"}], "exceptions": [{"name": "ImageNotFoundException", "description": "Thrown when the specified image path is invalid or inaccessible"}, {"name": "UnsupportedAnalysisTypeException", "description": "Occurs when analysis_type contains invalid or unsupported analysis categories"}], "toolkit_name": "ImageAnalysisToolkit"}
{"name": "image_object_detector", "description": "Detects objects within an image and returns their labels, confidence scores, and bounding box coordinates.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path or URL of the input image."}, "confidence_threshold": {"type": "number", "description": "Minimum confidence score threshold for detected objects (0.0 to 1.0)."}, "model_name": {"type": "string", "description": "Name of the detection model to use (e.g., 'faster_rcnn', 'yolo')."}}, "required": ["image_path"]}, "returns": [{"name": "detections", "type": "array", "description": "An array of detected objects, each containing 'label' (string), 'confidence' (number), and 'bounding_box' (object with 'x', 'y', 'width', 'height' as numbers)."}], "exceptions": [{"name": "InvalidImageException", "description": "The specified image path is invalid, or the image could not be loaded."}, {"name": "ModelNotFoundException", "description": "The specified detection model does not exist or is not available."}, {"name": "InvalidConfidenceException", "description": "The confidence threshold is not a valid value between 0.0 and 1.0."}], "toolkit_name": "ImageAnalysisToolkit"}
{"name": "compare_images", "description": "Compares two images to determine their visual similarity and provides analysis metrics.", "parameters": {"type": "object", "properties": {"first_image": {"type": "string", "description": "Path or URL of the first image to compare."}, "second_image": {"type": "string", "description": "Path or URL of the second image to compare."}, "similarity_metric": {"type": "string", "description": "The type of similarity metric to use (e.g., 'structural', 'color_histogram', 'deep_learning'). Default is 'structural'."}, "threshold": {"type": "number", "description": "Optional threshold (0.0-1.0) to determine if images are considered similar. Defaults to 0.7."}}, "required": ["first_image", "second_image"]}, "returns": [{"name": "similarity_score", "type": "number", "description": "A numerical value between 0.0 and 1.0 indicating the similarity between the images."}, {"name": "is_similar", "type": "boolean", "description": "Indicates whether the similarity score meets or exceeds the specified threshold."}, {"name": "analysis_details", "type": "object", "description": "A detailed breakdown of the comparison (e.g., pixel differences, dominant colors, feature matches)."}], "exceptions": [{"name": "InvalidImageException", "description": "Thrown if either image path/URL is invalid, or the images cannot be processed (e.g., corrupted files)."}, {"name": "InvalidMetricException", "description": "Thrown if the 'similarity_metric' parameter is not recognized or supported."}], "toolkit_name": "ImageAnalysisToolkit"}
{"name": "image_description_generator", "description": "Generates a natural language description of the content and context of an image.", "parameters": {"type": "object", "properties": {"image_source": {"type": "string", "description": "The path or URL of the image to analyze."}, "language": {"type": "string", "description": "The language code for the generated description (e.g., 'en', 'es'). Defaults to 'en'."}, "detail_level": {"type": "string", "description": "The level of detail in the description: 'basic' or 'detailed'. Defaults to 'basic'."}}, "required": ["image_source"]}, "returns": [{"name": "result", "type": "object", "description": "Contains 'description' (string) of the image content and 'confidence' (number between 0 and 1 indicating model's confidence)."}], "exceptions": [{"name": "InvalidImageSourceException", "description": "The image source provided is invalid, inaccessible, or empty."}, {"name": "UnsupportedImageFormatException", "description": "The image format is not supported (e.g., not JPEG, PNG, etc.)."}, {"name": "UnsupportedLanguageException", "description": "The requested language for the description is not supported."}], "toolkit_name": "ImageAnalysisToolkit"}
{"name": "add_numbers", "description": "Adds a list of numbers and returns the sum.", "parameters": {"type": "object", "properties": {"numbers": {"type": "array", "description": "The list of numbers to add.", "items": {"type": "number", "description": "A number to be added"}}}, "required": ["numbers"]}, "returns": [{"name": "sum", "type": "number", "description": "The sum of all numbers provided."}], "exceptions": [{"name": "InvalidInputException", "description": "Thrown if the 'numbers' array is empty or contains non-numeric values."}], "toolkit_name": "MathToolkit"}
{"name": "multiply_numbers", "description": "Multiply two numbers to get their product.", "parameters": {"type": "object", "properties": {"a": {"type": "number", "description": "The first number to multiply."}, "b": {"type": "number", "description": "The second number to multiply."}}, "required": ["a", "b"]}, "returns": [{"name": "product", "type": "number", "description": "The result of multiplying the two input numbers."}], "exceptions": [{"name": "InvalidParameterException", "description": "Thrown when either parameter 'a' or 'b' is not a valid number."}], "toolkit_name": "MathToolkit"}
{"name": "subtract_numbers", "description": "Subtract two numbers and return the result.", "parameters": {"type": "object", "properties": {"minuend": {"type": "number", "description": "The number from which another number (the subtrahend) is to be subtracted."}, "subtrahend": {"type": "number", "description": "The number that is to be subtracted from the minuend."}}, "required": ["minuend", "subtrahend"]}, "returns": [{"name": "difference", "type": "number", "description": "The result of subtracting the subtrahend from the minuend."}], "exceptions": [{"name": "InvalidRequestException", "description": "Thrown if either 'minuend' or 'subtrahend' is not a valid number."}], "toolkit_name": "MathToolkit"}
{"name": "divide_numbers", "description": "Performs division of two numbers, returning the quotient.", "parameters": {"type": "object", "properties": {"numerator": {"type": "number", "description": "The number to be divided."}, "denominator": {"type": "number", "description": "The number by which the numerator is divided. Must not be zero."}}, "required": ["numerator", "denominator"]}, "returns": [{"name": "quotient", "type": "number", "description": "The result of dividing the numerator by the denominator."}], "exceptions": [{"name": "DivisionByZeroException", "description": "Thrown when the denominator is zero, as division by zero is undefined."}], "toolkit_name": "MathToolkit"}
{"name": "power_numbers", "description": "Calculates the result of raising a base number to the power of an exponent.", "parameters": {"type": "object", "properties": {"base": {"type": "number", "description": "The base number to be raised to the exponent."}, "exponent": {"type": "number", "description": "The exponent indicating the power to which the base is raised."}}, "required": ["base", "exponent"]}, "returns": [{"name": "result", "type": "number", "description": "The computed value of base raised to the exponent."}], "exceptions": [{"name": "InvalidInputException", "description": "Thrown when either base or exponent is not a valid number, or when the computation results in a non-real number (e.g., negative base with fractional exponent)."}], "toolkit_name": "MathToolkit"}
{"name": "invoke_external_tool", "description": "Invokes an external tool using the Model Context Protocol (MCP) and returns the response.", "parameters": {"type": "object", "properties": {"tool_name": {"type": "string", "description": "The name of the external tool to be invoked."}, "function": {"type": "string", "description": "The specific function or method within the tool to execute."}, "arguments": {"type": "object", "description": "A key-value map of arguments for the function. Optional if the function does not require parameters."}}, "required": ["tool_name", "function"]}, "returns": [{"name": "response", "type": "object", "description": "Contains the result of the function execution. Includes 'result' (any type) if successful, or 'error_message' (string) if an error occurred."}], "exceptions": [{"name": "ToolNotFoundException", "description": "The specified tool does not exist or is not registered in the MCP system."}, {"name": "FunctionExecutionException", "description": "The function execution failed due to invalid arguments, tool unavailability, or runtime errors."}], "toolkit_name": "MCPToolkit"}
{"name": "register_external_service", "description": "Register a new external service with the Model Context Protocol (MCP) for future tool invocations.", "parameters": {"type": "object", "properties": {"service_name": {"type": "string", "description": "Unique name identifier for the external service."}, "api_endpoint": {"type": "string", "description": "Base API endpoint URL for the external service."}, "auth_credentials": {"type": "object", "description": "Authentication credentials required to interact with the service", "properties": {"api_key": {"type": "string", "description": "API key for authentication"}, "token": {"type": "string", "description": "Bearer token for authentication"}}, "required": ["api_key", "token"]}, "timeout_seconds": {"type": "number", "description": "Maximum time in seconds to wait for a response from the service (default 30)"}}, "required": ["service_name", "api_endpoint"]}, "returns": [{"name": "registration_status", "type": "object", "description": "Contains 'success' (boolean), 'service_id' (string if successful), and 'error_code' (string if failed)"}], "exceptions": [{"name": "DuplicateServiceError", "description": "Thrown when attempting to register a service with a name that already exists"}, {"name": "InvalidAuthError", "description": "Thrown when provided authentication credentials are missing or invalid"}, {"name": "MalformedEndpointError", "description": "Thrown when the provided API endpoint is not a valid URL format"}], "toolkit_name": "MCPToolkit"}
{"name": "query_external_data", "description": "Query data from a registered external service using the Model Context Protocol (MCP).", "parameters": {"type": "object", "properties": {"service_id": {"type": "string", "description": "The unique identifier of the external service to query."}, "query_params": {"type": "object", "description": "A dictionary of query parameters required by the service."}, "auth_token": {"type": "string", "description": "An optional authentication token for accessing the service."}}, "required": ["service_id", "query_params"]}, "returns": [{"name": "response", "type": "object", "description": "An object containing 'data' (the result from the service), 'status' (string indicating success/failure), and 'error_message' (if status is failure)."}], "exceptions": [{"name": "InvalidServiceIDException", "description": "The provided service_id does not correspond to a registered external service."}, {"name": "AuthenticationException", "description": "The authentication token is missing, invalid, or insufficient for the requested service."}, {"name": "InvalidQueryParameterException", "description": "The query_params provided are invalid or missing required parameters for the service."}], "toolkit_name": "MCPToolkit"}
{"name": "manage_external_authentication", "description": "Manages authentication and credentials for external services via the Model Context Protocol (MCP), allowing actions like adding, updating, or removing credentials.", "parameters": {"type": "object", "properties": {"action": {"type": "string", "description": "The action to perform (e.g., 'add', 'update', 'remove', or 'validate')."}, "service_name": {"type": "string", "description": "The name of the external service requiring authentication."}, "credentials": {"type": "object", "description": "A key-value map of authentication credentials (e.g., username, API key, or OAuth parameters)."}, "token": {"type": "string", "description": "An authentication token for the service (alternative to credentials)."}}, "required": ["action", "service_name"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean), 'message' (string describing outcome), and 'data' (any additional details, like a token or error code)."}], "exceptions": [{"name": "ServiceNotFoundException", "description": "The specified service is not registered in the MCP system."}, {"name": "InvalidCredentialsException", "description": "Provided credentials or token are invalid for the service."}, {"name": "ActionNotSupportedException", "description": "The requested action is not supported by this tool or service."}], "toolkit_name": "MCPToolkit"}
{"name": "list_registered_services", "description": "Lists all registered external services in the MCPToolkit, optionally filtered by type or status.", "parameters": {"type": "object", "properties": {"service_type": {"type": "string", "description": "Optional filter to list services of a specific type (e.g., 'API', 'Database')."}, "status": {"type": "string", "description": "Optional filter to list services by operational status (e.g., 'active', 'inactive')."}}, "required": []}, "returns": [{"name": "services", "type": "array", "description": "An array of objects representing registered services. Each object contains properties like 'name', 'type', 'status', and 'last_updated_time'."}], "exceptions": [{"name": "NoServicesFoundException", "description": "Thrown when no services match the provided filters, or no services are registered."}, {"name": "InvalidFilterException", "description": "Thrown if the provided 'service_type' or 'status' values are invalid or not recognized."}], "toolkit_name": "MCPToolkit"}
{"name": "save_memory", "description": "Save the provided memory data to the ChatAgent's storage.", "parameters": {"type": "object", "properties": {"memory_data": {"type": "object", "description": "The data to be saved in the memory. Must be a valid JSON object."}}, "required": ["memory_data"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean, indicates whether the save was successful), 'message' (string, a status message), and 'stored_data' (the data that was stored, if successful)."}], "exceptions": [{"name": "InvalidMemoryDataException", "description": "The provided memory_data is not a valid JSON object or contains data types that cannot be stored."}], "toolkit_name": "MemoryToolkit"}
{"name": "load_memory", "description": "Loads the value associated with a specific key from the ChatAgent's memory.", "parameters": {"type": "object", "properties": {"key": {"type": "string", "description": "The key under which the value was stored."}, "default_value": {"type": "object", "description": "The default value to return if the key is not found. Defaults to null if not provided."}}, "required": ["key"]}, "returns": [{"name": "value", "type": "object", "description": "The loaded value from memory, or the default_value if specified and the key was not found. Returns null if the key is not found and no default_value is provided."}], "exceptions": [{"name": "InvalidParameterException", "description": "The key parameter is an empty string or not a valid string."}], "toolkit_name": "MemoryToolkit"}
{"name": "clear_memory", "description": "Clears specified or all memory entries of the ChatAgent.", "parameters": {"type": "object", "properties": {"memory_type": {"type": "string", "description": "The type of memory to clear (e.g., 'short_term', 'long_term'). If omitted, all memory is cleared."}}, "required": []}, "returns": [{"name": "result", "type": "object", "description": "Contains 'success' (boolean indicating operation success), 'cleared_count' (integer number of entries cleared), and 'message' (string describing the outcome)."}], "exceptions": [{"name": "InvalidMemoryTypeException", "description": "The specified 'memory_type' is not a valid memory category (e.g., 'short_term', 'long_term')."}, {"name": "MemoryAccessException", "description": "Failed to access or modify the memory data due to system restrictions or invalid state."}], "toolkit_name": "MemoryToolkit"}
{"name": "load_mesh", "description": "Loads a 3D mesh from a file into memory.", "parameters": {"type": "object", "properties": {"file_path": {"type": "string", "description": "The path to the mesh file."}, "format": {"type": "string", "description": "The file format (e.g., 'obj', 'stl', 'ply'). Defaults to auto-detection based on file extension."}}, "required": ["file_path"]}, "returns": [{"name": "mesh_data", "type": "object", "description": "The loaded mesh data, containing vertices (array of 3D coordinates) and face indices (array of vertex indices defining polygons)."}], "exceptions": [{"name": "FileNotFoundError", "description": "The specified file does not exist at the provided file_path."}, {"name": "InvalidFormatException", "description": "The file format is unsupported, or the mesh data is corrupted/invalid."}], "toolkit_name": "MeshyToolkit"}
{"name": "compute_mesh_volume", "description": "Calculate the volume of a 3D mesh based on its vertices and faces.", "parameters": {"type": "object", "properties": {"mesh": {"type": "object", "description": "The 3D mesh data object containing vertices (array of 3D coordinates) and faces (indices referencing the vertices)."}}, "required": ["mesh"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'volume' (number, the computed volume), 'success' (boolean indicating success), and 'error_message' (string if applicable)."}], "exceptions": [{"name": "InvalidMeshException", "description": "The provided mesh data is invalid (e.g., missing vertices or faces, non-manifold geometry, or inconsistent face definitions)."}], "toolkit_name": "MeshyToolkit"}
{"name": "simplify_mesh", "description": "Simplify a 3D mesh to reduce the number of vertices or triangles while preserving the overall shape.", "parameters": {"type": "object", "properties": {"mesh_data": {"type": "object", "description": "The input mesh data structure (e.g., loaded from load_mesh)."}, "target_count": {"type": "integer", "description": "The desired number of vertices or triangles in the simplified mesh."}, "ratio": {"type": "number", "description": "The ratio (between 0.0 and 1.0) to reduce the mesh by. For example, 0.5 aims for half the original size."}}, "required": ["mesh_data"]}, "returns": [{"name": "result", "type": "object", "description": "Contains the simplified mesh data, vertex count, and triangle count. The object has 'simplified_mesh', 'vertex_count', and 'triangle_count' properties."}], "exceptions": [{"name": "InvalidMeshDataException", "description": "The provided mesh_data is not a valid mesh structure."}, {"name": "InvalidSimplifyParameterException", "description": "Either target_count or ratio must be provided (but not both), or parameters are invalid (e.g., ratio outside 0.0-1.0 range)."}], "toolkit_name": "MeshyToolkit"}
{"name": "compute_mesh_surface_area", "description": "Calculate the surface area of a 3D mesh.", "parameters": {"type": "object", "properties": {"mesh": {"type": "object", "description": "The 3D mesh object to calculate the surface area for."}}, "required": ["mesh"]}, "returns": [{"name": "surface_area", "type": "number", "description": "The calculated surface area of the mesh."}], "exceptions": [{"name": "InvalidMeshException", "description": "The provided mesh is invalid or does not contain the necessary data to compute surface area."}], "toolkit_name": "MeshyToolkit"}
{"name": "repair_mesh", "description": "Repair common issues in a 3D mesh such as fixing normals, filling holes, and ensuring manifold geometry.", "parameters": {"type": "object", "properties": {"mesh": {"type": "object", "description": "The 3D mesh data to be repaired."}, "fill_holes": {"type": "boolean", "description": "Whether to fill holes in the mesh. Defaults to true."}, "fix_normals": {"type": "boolean", "description": "Whether to recalculate and orient normals correctly. Defaults to true."}}, "required": ["mesh"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'repaired_mesh' (the repaired 3D mesh data) and 'repair_report' (an array of strings detailing the repairs performed)."}], "exceptions": [{"name": "InvalidMeshException", "description": "The input mesh is invalid, empty, or cannot be processed."}], "toolkit_name": "MeshyToolkit"}
{"name": "extract_document_content", "description": "Extracts text, tables, and formulas from a document using OCR and advanced recognition algorithms.", "parameters": {"type": "object", "properties": {"document_path": {"type": "string", "description": "The local or remote path to the document file (e.g., PDF, image)."}, "ocr_enabled": {"type": "boolean", "description": "Whether to enable OCR for image-based documents. Defaults to true."}, "detect_tables": {"type": "boolean", "description": "Whether to enable table detection in the document. Defaults to false."}, "formula_recognition": {"type": "boolean", "description": "Whether to enable formula recognition in the document. Defaults to false."}, "language": {"type": "string", "description": "The language code for OCR (e.g., 'eng' for English, 'chs' for Simplified Chinese). Defaults to 'eng'."}}, "required": ["document_path"]}, "returns": [{"name": "text_content", "type": "string", "description": "The extracted text content from the document."}, {"name": "tables", "type": "array", "description": "Detected tables as an array of objects, where each object represents a table's structure (rows and columns)."}, {"name": "formulas", "type": "array", "description": "Detected mathematical formulas as an array of strings in LaTeX format."}, {"name": "metadata", "type": "object", "description": "Document metadata including page count, detection confidence score, and processing time."}], "exceptions": [{"name": "InvalidDocumentException", "description": "The specified document path is invalid, the file format is unsupported, or the document cannot be processed."}, {"name": "UnsupportedLanguageException", "description": "The specified OCR language is not supported by the MinerU API."}], "toolkit_name": "MinerUToolkit"}
{"name": "process_document_data", "description": "Process extracted document content using OCR, formula recognition, and table detection.", "parameters": {"type": "object", "properties": {"document_data": {"type": "string", "description": "The raw document data (e.g., file path or base64-encoded string) to process."}, "ocr_enabled": {"type": "boolean", "description": "Whether to enable OCR processing (default: true if unspecified)."}, "formula_recognition_enabled": {"type": "boolean", "description": "Whether to enable formula recognition (default: false if unspecified)."}, "table_detection_enabled": {"type": "boolean", "description": "Whether to enable table structure detection (default: false if unspecified)."}, "language": {"type": "string", "description": "Optional language code (e.g., 'en') for OCR processing."}}, "required": ["document_data"]}, "returns": [{"name": "processed_content", "type": "object", "description": "Processed document data containing 'text' (string), 'formulas' (array of detected formula strings), and 'tables' (array of detected table structures as objects)."}], "exceptions": [{"name": "InvalidDocumentException", "description": "The input document data is invalid, corrupted, or in an unsupported format."}, {"name": "ProcessingErrorException", "description": "An error occurred during processing (e.g., OCR failed, formula detection timed out)."}], "toolkit_name": "MinerUToolkit"}
{"name": "detect_tables", "description": "Detects and extracts tables from a document using OCR, returning their structure and content.", "parameters": {"type": "object", "properties": {"document_path": {"type": "string", "description": "The local path to the document file (e.g., PDF, image)."}, "page_range": {"type": "array", "description": "List of page numbers to process (1-based index).", "items": {"type": "integer", "description": "Page number to include in processing."}}, "ocr_language": {"type": "string", "description": "Language code for OCR processing (e.g., 'eng' for English)."}, "include_ocr_text": {"type": "boolean", "description": "Whether to include the raw OCR text along with table data."}}, "required": ["document_path"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'tables' (array of detected tables with their structure) and optionally 'ocr_text' (string) if include_ocr_text is true."}], "exceptions": [{"name": "InvalidDocumentPathException", "description": "The specified document path is invalid or inaccessible."}, {"name": "UnsupportedLanguageException", "description": "The specified OCR language is not supported by the API."}, {"name": "TableDetectionError", "description": "Failed to detect tables in the document due to processing errors."}], "toolkit_name": "MinerUToolkit"}
{"name": "shortest_path", "description": "Finds the shortest path between two nodes in a graph.", "parameters": {"type": "object", "properties": {"graph": {"type": "object", "description": "Adjacency list representation of the graph. Each node is a key, and its value is an array of adjacent nodes. Edge attributes can be provided as nested objects."}, "source": {"type": "string", "description": "The starting node of the path."}, "target": {"type": "string", "description": "The destination node of the path."}, "weight": {"type": "string", "description": "Name of the edge attribute to use as weight. Defaults to equal weight if not provided."}}, "required": ["graph", "source", "target"]}, "returns": [{"name": "path", "type": "array", "description": "List of nodes forming the shortest path from the source to the target node."}], "exceptions": [{"name": "NoPathFoundException", "description": "No path exists between the specified source and target nodes in the graph."}, {"name": "InvalidGraphInputException", "description": "The input graph is invalid, or the source/target nodes are not present in the graph."}], "toolkit_name": "NetworkXToolkit"}
{"name": "minimum_spanning_tree", "description": "Calculates the minimum spanning tree of a weighted, undirected graph using Kruskal's algorithm.", "parameters": {"type": "object", "properties": {"edges": {"type": "array", "description": "List of edges in the graph. Each edge is an object with 'source', 'target', and 'weight' properties.", "items": {"type": "object", "properties": {"source": {"type": "string", "description": "The source node of the edge."}, "target": {"type": "string", "description": "The target node of the edge."}, "weight": {"type": "number", "description": "The weight of the edge."}}, "required": ["source", "target", "weight"]}}, "weight_attr": {"type": "string", "description": "The attribute name for the edge weights (default is 'weight').", "default": "weight"}}, "required": ["edges"]}, "returns": [{"name": "mst_edges", "type": "array", "description": "List of edges forming the minimum spanning tree. Each edge includes 'source', 'target', and 'weight'."}], "exceptions": [{"name": "InvalidGraphException", "description": "The input edges are invalid (missing required fields) or the graph is disconnected and cannot form a spanning tree."}], "toolkit_name": "NetworkXToolkit"}
{"name": "get_notion_page", "description": "Retrieves content from a Notion page using its unique identifier and the Notion API.", "parameters": {"type": "object", "properties": {"page_id": {"type": "string", "description": "The unique identifier of the Notion page to retrieve."}, "integration_token": {"type": "string", "description": "The Notion API integration token for authentication."}, "include_children": {"type": "boolean", "description": "Whether to include child blocks of the page in the response (default: false)."}, "property_names": {"type": "array", "description": "List of property names to include in the response (optional filter).", "items": {"type": "string", "description": "Name of a property to retrieve"}}}, "required": ["page_id", "integration_token"]}, "returns": [{"name": "page_data", "type": "object", "description": "Contains the retrieved page content including properties, blocks, and metadata if successful; includes error details if unsuccessful."}], "exceptions": [{"name": "InvalidPageIDException", "description": "Thrown when the provided page_id is invalid or does not correspond to an existing Notion page."}, {"name": "AuthenticationFailedException", "description": "Thrown when the integration_token is invalid or lacks sufficient permissions to access the page."}, {"name": "APIRequestException", "description": "Thrown for general API errors such as network issues or rate limiting."}], "toolkit_name": "NotionToolkit"}
{"name": "search_notion_pages", "description": "Search for Notion pages or databases based on query, filters, and sorting parameters.", "parameters": {"type": "object", "properties": {"query": {"type": "string", "description": "Search keyword or phrase to match page content or titles."}, "filter": {"type": "object", "description": "Advanced filter object to narrow results by property values, e.g., {\"property\": \"Status\", \"equals\": \"Completed\"}."}, "sort": {"type": "object", "description": "Sorting criteria object, e.g., {\"field\": \"last_edited_time\", \"direction\": \"descending\"}."}, "page_size": {"type": "integer", "description": "Maximum number of results to return (1-100)."}, "start_cursor": {"type": "string", "description": "Pagination cursor from a previous response to retrieve the next page of results."}}, "required": ["query"]}, "returns": [{"name": "results", "type": "array", "description": "Array of matching page objects containing their ID, title, properties, and URL."}, {"name": "next_cursor", "type": "string", "description": "Cursor value for pagination to retrieve subsequent results, or null if no more pages."}], "exceptions": [{"name": "InvalidFilterException", "description": "Thrown when the 'filter' parameter contains invalid syntax or references non-existent properties."}, {"name": "NotionAPIException", "description": "Occurs when the Notion API returns an error (e.g., invalid authentication token, rate limiting)."}], "toolkit_name": "NotionToolkit"}
{"name": "get_notion_database", "description": "Retrieve entries from a Notion database based on optional filtering criteria.", "parameters": {"type": "object", "properties": {"database_id": {"type": "string", "description": "The unique identifier of the Notion database to query."}, "filter": {"type": "object", "description": "A Notion-compatible filter object to narrow search results (e.g., property conditions)."}}, "required": ["database_id"]}, "returns": [{"name": "database_content", "type": "object", "description": "Contains 'results' (array of page objects in the database), 'next_cursor' (string pagination token), and 'has_more' (boolean indicating if more results exist)."}], "exceptions": [{"name": "InvalidDatabaseIdException", "description": "Thrown when the provided database ID is invalid or does not exist in the Notion workspace."}, {"name": "AuthenticationException", "description": "Occurs when the Notion API credentials are invalid or lack access to the specified database."}, {"name": "InvalidFilterException", "description": "Raised when the provided filter object is malformed or uses unsupported Notion filter syntax."}], "toolkit_name": "NotionToolkit"}
{"name": "list_notion_pages", "description": "Retrieve a list of pages from a specified Notion database based on filters and sorting criteria.", "parameters": {"type": "object", "properties": {"database_id": {"type": "string", "description": "The unique identifier of the Notion database to query."}, "filter": {"type": "object", "description": "An object defining criteria to filter pages (e.g., property values)."}, "sort": {"type": "array", "description": "An array of objects defining how to sort the results. Each object must include 'direction' (ascending/descending) and 'property' (property name).", "items": {"type": "object", "properties": {"direction": {"type": "string", "description": "Sorting direction (ascending or descending)"}, "property": {"type": "string", "description": "The property name to sort by"}}}}}, "required": ["database_id"]}, "returns": [{"name": "pages", "type": "array", "description": "An array of page objects containing their content, properties, and metadata from the Notion database."}], "exceptions": [{"name": "InvalidDatabaseIDException", "description": "Thrown if the provided 'database_id' is invalid or does not exist in the Notion workspace."}, {"name": "InvalidFilterException", "description": "Thrown if the 'filter' parameter is malformed or contains unsupported criteria."}], "toolkit_name": "NotionToolkit"}
{"name": "get_notion_block_children", "description": "Retrieve the children blocks of a specified Notion block using its ID.", "parameters": {"type": "object", "properties": {"block_id": {"type": "string", "description": "The unique identifier of the Notion block whose children are to be retrieved."}, "page_size": {"type": "integer", "description": "The maximum number of children blocks to return in a single response (default is 100)."}, "start_cursor": {"type": "string", "description": "The cursor used to fetch the next page of results (obtained from a previous response)."}}, "required": ["block_id"]}, "returns": [{"name": "children", "type": "array", "description": "An array of block objects representing the children of the specified Notion block."}, {"name": "has_more", "type": "boolean", "description": "Indicates whether there are more blocks available beyond the current response."}, {"name": "next_cursor", "type": "string", "description": "The cursor value to use in the next request to retrieve additional blocks."}], "exceptions": [{"name": "InvalidBlockIDException", "description": "The provided block_id is invalid or does not correspond to an existing Notion block."}, {"name": "PermissionDeniedException", "description": "The user does not have permission to access the specified block's children."}], "toolkit_name": "NotionToolkit"}
{"name": "validate_openapi_spec", "description": "Validates an OpenAPI specification document against the official OpenAPI schema to ensure syntactic and semantic correctness.", "parameters": {"type": "object", "properties": {"spec_content": {"type": "string", "description": "The raw OpenAPI specification content in JSON or YAML format."}}, "required": ["spec_content"]}, "returns": [{"name": "validation_result", "type": "object", "description": "An object containing 'valid' (boolean indicating validation success), 'errors' (array of validation error messages), and 'warnings' (array of non-critical issues)."}], "exceptions": [{"name": "InvalidSpecFormatException", "description": "Thrown when the 'spec_content' is not valid JSON/YAML or cannot be parsed."}, {"name": "ValidationFailedException", "description": "Thrown when the OpenAPI spec violates the official schema requirements (e.g., missing required fields)."}], "toolkit_name": "OpenAPIToolkit"}
{"name": "generate_client_code", "description": "Generate client code for a specified programming language based on an OpenAPI specification.", "parameters": {"type": "object", "properties": {"spec": {"type": "string", "description": "The OpenAPI specification content or path to the specification file."}, "language": {"type": "string", "description": "The target programming language for code generation (e.g., 'python', 'javascript', 'typescript')."}, "options": {"type": "object", "properties": {"includeExamples": {"type": "boolean", "description": "Whether to include example values in generated code (default: false)."}, "addDocs": {"type": "boolean", "description": "Whether to add documentation comments to the generated code (default: true)."}, "outputFormat": {"type": "string", "description": "Optional format specifier for the generated code (e.g., 'async' for asynchronous code)."}}, "description": "Optional configuration options for code generation."}}, "required": ["spec", "language"]}, "returns": [{"name": "result", "type": "object", "description": "Contains generated code (string), success status (boolean), and error message (string if failed)."}], "exceptions": [{"name": "InvalidSpecException", "description": "The provided OpenAPI specification is invalid or malformed."}, {"name": "UnsupportedLanguageException", "description": "The requested programming language is not supported by the code generator."}, {"name": "GenerationFailedException", "description": "An error occurred during code generation (e.g., missing required parameters in the spec)."}], "toolkit_name": "OpenAPIToolkit"}
{"name": "call_api_endpoint", "description": "Execute an HTTP request based on an OpenAPI specification to interact with a REST API endpoint.", "parameters": {"type": "object", "properties": {"openapi_spec": {"type": "string", "description": "The OpenAPI specification in JSON format."}, "path": {"type": "string", "description": "The API endpoint path (e.g., '/users/{id}')"}, "method": {"type": "string", "description": "The HTTP method (e.g., 'GET', 'POST')"}, "path_parameters": {"type": "object", "description": "Key-value pairs for path parameters (e.g., {'id': '123'})"}, "query_parameters": {"type": "object", "description": "Key-value pairs for query parameters (e.g., {'page': '2'})"}, "headers": {"type": "object", "description": "HTTP headers as key-value pairs"}, "request_body": {"type": "object", "description": "The request body, typically as a JSON object for POST/PUT requests"}}, "required": ["openapi_spec", "path", "method"]}, "returns": [{"name": "response", "type": "object", "description": "The HTTP response containing 'status_code' (integer), 'headers' (object), and 'body' (object|string) based on the API's response."}], "exceptions": [{"name": "EndpointNotFoundException", "description": "The specified path and method combination does not exist in the provided OpenAPI specification."}, {"name": "InvalidSpecException", "description": "The provided OpenAPI specification is invalid or malformed."}, {"name": "NetworkException", "description": "A network error occurred while attempting to send the HTTP request."}], "toolkit_name": "OpenAPIToolkit"}
{"name": "parse_openapi_spec", "description": "Parses an OpenAPI specification into a structured format for further processing.", "parameters": {"type": "object", "properties": {"openapi_spec": {"type": "string", "description": "The path to the OpenAPI specification file or the raw JSON/YAML content to parse."}}, "required": ["openapi_spec"]}, "returns": [{"name": "parsed_spec", "type": "object", "description": "A structured representation of the OpenAPI specification, including endpoints, operations, parameters, and other components."}], "exceptions": [{"name": "InvalidSpecException", "description": "The provided OpenAPI specification is invalid (e.g., incorrect format, missing required fields, or invalid syntax)."}], "toolkit_name": "OpenAPIToolkit"}
{"name": "generate_api_documentation", "description": "Generates human-readable API documentation from an OpenAPI specification.", "parameters": {"type": "object", "properties": {"openapi_spec": {"type": "string", "description": "The OpenAPI specification in JSON or YAML format."}, "format": {"type": "string", "description": "The output format. Supported values: 'markdown', 'html', or 'pdf'."}, "include_examples": {"type": "boolean", "description": "Whether to include example requests/responses in the documentation."}}, "required": ["openapi_spec", "format"]}, "returns": [{"name": "documentation", "type": "string", "description": "The generated API documentation content in the requested format."}], "exceptions": [{"name": "InvalidFormatException", "description": "The requested format is not supported (must be markdown/html/pdf)."}, {"name": "InvalidOpenAPISpecException", "description": "The provided OpenAPI specification is invalid or cannot be parsed."}], "toolkit_name": "OpenAPIToolkit"}
{"name": "get_stock_data", "description": "Retrieve historical price data for a specific stock.", "parameters": {"type": "object", "properties": {"symbol": {"type": "string", "description": "The stock symbol (e.g., AAPL for Apple Inc.)."}, "start_date": {"type": "string", "description": "The start date of the data range in 'YYYY-MM-DD' format."}, "end_date": {"type": "string", "description": "The end date of the data range in 'YYYY-MM-DD' format."}, "interval": {"type": "string", "description": "The time interval between data points (e.g., '1d' for daily, '1wk' for weekly)."}}, "required": ["symbol"]}, "returns": [{"name": "data", "type": "array", "description": "An array of historical price data entries. Each entry contains date, open price, high price, low price, close price, and volume."}], "exceptions": [{"name": "InvalidSymbolException", "description": "The provided stock symbol is invalid or does not exist in the database."}, {"name": "InvalidDateException", "description": "The start_date is after the end_date, or the dates are not in the correct format."}], "toolkit_name": "OpenBBToolkit"}
{"name": "get_etf_data", "description": "Retrieve and analyze data for a specific ETF, including holdings, performance metrics, and sector allocations.", "parameters": {"type": "object", "properties": {"symbol": {"type": "string", "description": "The ETF ticker symbol (e.g., SPY)."}, "data_type": {"type": "string", "description": "Type of data to retrieve: 'holdings', 'performance', or 'allocations'."}, "start_date": {"type": "string", "description": "Start date for performance data (YYYY-MM-DD). Only applicable when data_type is 'performance'."}, "end_date": {"type": "string", "description": "End date for performance data (YYYY-MM-DD). Only applicable when data_type is 'performance'."}}, "required": ["symbol", "data_type"]}, "returns": [{"name": "etf_data", "type": "object", "description": "The requested ETF data. Structure varies by data_type: 'holdings' returns an array of holdings with their details; 'performance' returns time series metrics between start_date and end_date; 'allocations' returns sector/asset class breakdown."}], "exceptions": [{"name": "InvalidSymbolException", "description": "The ETF symbol is invalid or not found in the system."}, {"name": "InvalidDataFormatException", "description": "The start_date or end_date is not in the correct format (YYYY-MM-DD)."}, {"name": "InvalidDataTypeException", "description": "The data_type provided is not one of the accepted values ('holdings', 'performance', 'allocations')."}], "toolkit_name": "OpenBBToolkit"}
{"name": "get_crypto_data", "description": "Fetch historical price data for a cryptocurrency pair.", "parameters": {"type": "object", "properties": {"symbol": {"type": "string", "description": "The cryptocurrency symbol (e.g., BTC, ETH)."}, "currency": {"type": "string", "description": "The currency pair (e.g., USD, EUR). Defaults to USD if not provided."}, "interval": {"type": "string", "description": "The time interval between data points (e.g., 1m, 5m, 1h). Defaults to 1d (daily)."}, "start_date": {"type": "string", "description": "The start date for historical data in YYYY-MM-DD format."}, "end_date": {"type": "string", "description": "The end date for historical data in YYYY-MM-DD format."}}, "required": ["symbol"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'data' (array of price data points), 'symbol_used' (string), 'currency_pair' (string), 'interval_used' (string), and 'status' (string indicating success/failure)."}], "exceptions": [{"name": "InvalidSymbolException", "description": "The provided cryptocurrency symbol is invalid or not supported."}, {"name": "InvalidDateFormatException", "description": "The start_date or end_date parameters are not in the correct YYYY-MM-DD format."}, {"name": "DataNotFoundException", "description": "No data exists for the requested cryptocurrency pair and date range."}], "toolkit_name": "OpenBBToolkit"}
{"name": "get_economic_data", "description": "Retrieve historical or current economic indicator data for a specified country and indicator.", "parameters": {"type": "object", "properties": {"indicator": {"type": "string", "description": "The economic indicator to retrieve (e.g., 'GDP', 'CPI', 'Unemployment Rate')."}, "country": {"type": "string", "description": "The country for which to retrieve the economic data (e.g., 'United States', 'Germany')."}, "start_date": {"type": "string", "description": "The start date for historical data in 'YYYY-MM-DD' format (optional)."}, "end_date": {"type": "string", "description": "The end date for historical data in 'YYYY-MM-DD' format (optional)."}}, "required": ["indicator", "country"]}, "returns": [{"name": "data", "type": "array", "description": "Array of economic data entries. Each entry contains 'date' (string), 'value' (number), and 'unit' (string) of the indicator."}], "exceptions": [{"name": "InvalidParameterException", "description": "Thrown if the indicator, country, or date parameters are invalid or unsupported."}, {"name": "DataNotFoundException", "description": "Thrown if no data is found for the specified parameters."}], "toolkit_name": "OpenBBToolkit"}
{"name": "get_company_profile", "description": "Retrieves detailed company information including business description, financial highlights, and executive data based on a stock ticker symbol.", "parameters": {"type": "object", "properties": {"ticker": {"type": "string", "description": "The stock ticker symbol of the company (e.g., AAPL for Apple Inc.)."}, "fields": {"type": "array", "items": {"type": "string"}, "description": "Optional. Specify particular fields to include in the response. If omitted, all available fields are returned."}}, "required": ["ticker"]}, "returns": [{"name": "company_profile", "type": "object", "description": "Contains company details such as name, industry, sector, executives, market capitalization, and other financial metrics based on the OpenBB Platform's data."}], "exceptions": [{"name": "InvalidTickerException", "description": "The provided ticker symbol is invalid, not found in the system, or does not correspond to a listed company."}, {"name": "DataUnavailableException", "description": "The requested fields or company data are not available through the OpenBB Platform's current data sources."}], "toolkit_name": "OpenBBToolkit"}
{"name": "search_pubmed", "description": "Search PubMed for articles using specified query terms and return results.", "parameters": {"type": "object", "properties": {"query": {"type": "string", "description": "The search query terms."}, "retmax": {"type": "integer", "description": "Maximum number of results to return (default is 20 if not specified)."}, "retmode": {"type": "string", "description": "Format of the returned data (e.g., 'xml', 'json', or 'text')."}}, "required": ["query"]}, "returns": [{"name": "search_results", "type": "object", "description": "Contains 'results' (array of article summaries) and 'count' (integer total articles found). Each summary includes fields like title, authors, PMID, and abstract."}], "exceptions": [{"name": "InvalidQueryException", "description": "The search query is invalid, contains unsupported syntax, or exceeds length limits."}, {"name": "APILimitExceededException", "description": "The requested number of results (retmax) exceeds the API's allowed limit (max 10,000)."}, {"name": "APIConnectionException", "description": "Failed to connect to the PubMed E-utilities API due to network issues or service unavailability."}], "toolkit_name": "PubMedToolkit"}
{"name": "fetch_pubmed_articles", "description": "Retrieve full articles or summaries from PubMed using article IDs.", "parameters": {"type": "object", "properties": {"id_list": {"type": "array", "items": {"type": "string", "description": "PubMed ID (PMID)"}, "description": "List of PubMed IDs to retrieve."}, "db": {"type": "string", "description": "Database name, e.g., 'pubmed' or 'pmc'"}, "retmode": {"type": "string", "description": "Return mode, either 'xml' or 'text'. Defaults to 'xml'."}}, "required": ["id_list", "db"]}, "returns": [{"name": "data", "type": "string", "description": "The retrieved data in the specified format (XML or text)."}], "exceptions": [{"name": "InvalidIDListException", "description": "The provided ID list is empty or contains invalid PubMed IDs."}, {"name": "PubMedAPIErrorException", "description": "An error occurred while communicating with the PubMed API, such as rate limiting or invalid parameters."}], "toolkit_name": "PubMedToolkit"}
{"name": "get_pubmed_summary", "description": "Retrieve summary information for a list of PubMed IDs using the eSummary utility.", "parameters": {"type": "object", "properties": {"ids": {"type": "array", "items": {"type": "string", "description": "PubMed ID as a string."}, "description": "List of PubMed IDs to retrieve summaries for."}, "retmode": {"type": "string", "enum": ["xml", "json"], "default": "xml", "description": "Format of the returned data. Either 'xml' or 'json'."}}, "required": ["ids"]}, "returns": [{"name": "summaries", "type": "array", "description": "An array of summary objects, each containing the PubMed ID and corresponding summary text."}], "exceptions": [{"name": "InvalidIDFormatException", "description": "One or more IDs provided are not valid PubMed identifiers (must be positive integers)."}, {"name": "APIRequestFailed", "description": "The request to PubMed's E-utilities API failed due to network issues or server errors."}], "toolkit_name": "PubMedToolkit"}
{"name": "get_related_pubmed_articles", "description": "Retrieve related PubMed articles using the ELink utility based on a given PMID.", "parameters": {"type": "object", "properties": {"pmid": {"type": "integer", "description": "The PubMed ID of the article to find related articles for."}, "database": {"type": "string", "description": "(Optional) The target database for related articles (default: 'pubmed')."}, "linkname": {"type": "string", "description": "(Optional) The type of link to retrieve (e.g., 'relatedarticles', 'citedby')."}, "retmax": {"type": "integer", "description": "(Optional) The maximum number of related articles to return (default: 10)."}}, "required": ["pmid"]}, "returns": [{"name": "related_articles", "type": "array", "description": "An array of related PubMed IDs (PMIDs) as strings."}], "exceptions": [{"name": "InvalidPMIDException", "description": "The specified PMID is invalid, does not exist, or no related articles were found."}, {"name": "ServiceException", "description": "An error occurred while communicating with the PubMed E-utilities API."}], "toolkit_name": "PubMedToolkit"}
{"name": "get_top_posts", "description": "Retrieve the top posts from a specified subreddit for a given time period.", "parameters": {"type": "object", "properties": {"subreddit": {"type": "string", "description": "The name of the subreddit from which to collect top posts."}, "time_filter": {"type": "string", "description": "The time period to consider for top posts (e.g., 'hour', 'day', 'week', 'month', 'year', or 'all')."}, "limit": {"type": "integer", "description": "The maximum number of top posts to retrieve (must be between 1 and 100)."}}, "required": ["subreddit", "time_filter", "limit"]}, "returns": [{"name": "posts", "type": "array", "description": "An array of top posts, each containing 'title' (string), 'author' (string), 'score' (integer, upvotes), and 'created_utc' (number, Unix timestamp)."}], "exceptions": [{"name": "InvalidSubredditException", "description": "The specified subreddit does not exist or is invalid."}, {"name": "InvalidTimeFilterException", "description": "The 'time_filter' parameter contains an invalid value (must be one of 'hour', 'day', 'week', 'month', 'year', or 'all')."}, {"name": "InvalidLimitException", "description": "The 'limit' parameter is not an integer between 1 and 100."}], "toolkit_name": "RedditToolkit"}
{"name": "analyze_comments_sentiment", "description": "Performs sentiment analysis on comments of a specific Reddit post.", "parameters": {"type": "object", "properties": {"subreddit": {"type": "string", "description": "The name of the subreddit containing the post."}, "post_id": {"type": "string", "description": "The unique identifier of the Reddit post to analyze."}, "limit": {"type": "integer", "description": "The maximum number of comments to analyze (default is 100)."}, "time_filter": {"type": "string", "description": "Filters comments by time (e.g., 'hour', 'day', 'week', 'month')."}}, "required": ["subreddit", "post_id"]}, "returns": [{"name": "sentiment_metrics", "type": "object", "description": "An object containing 'positive' (integer), 'neutral' (integer), and 'negative' (integer) counts of comments, along with 'average_score' (number) representing the average sentiment polarity (-1 to 1)."}], "exceptions": [{"name": "PostNotFoundException", "description": "The specified post_id does not exist in the provided subreddit."}, {"name": "InvalidParameterException", "description": "The subreddit name is invalid, post_id is malformed, or required parameters are missing."}], "toolkit_name": "RedditToolkit"}
{"name": "track_keyword_discussions", "description": "Track discussions containing a specific keyword across subreddits.", "parameters": {"type": "object", "properties": {"keyword": {"type": "string", "description": "The keyword to track in discussions."}, "subreddit": {"type": "string", "description": "The specific subreddit to search. If omitted, searches across all subreddits."}, "time_frame": {"type": "string", "description": "The time frame for the search (e.g., 'hour', 'day', 'week', 'month', 'year', 'all'). Defaults to 'week'."}, "limit": {"type": "integer", "description": "The maximum number of results to return. Defaults to 25."}}, "required": ["keyword"]}, "returns": [{"name": "discussions", "type": "array", "description": "An array of objects representing discussions containing the keyword. Each object includes post ID, title, subreddit, author, content, and keyword mentions count."}], "exceptions": [{"name": "InvalidSubredditException", "description": "The specified subreddit does not exist or is invalid."}, {"name": "EmptyKeywordException", "description": "The keyword parameter is empty or not provided."}, {"name": "APIRateLimitException", "description": "The Reddit API rate limit has been exceeded."}], "toolkit_name": "RedditToolkit"}
{"name": "get_subreddit_info", "description": "Retrieves detailed information about a specific subreddit.", "parameters": {"type": "object", "properties": {"subreddit_name": {"type": "string", "description": "The name of the subreddit (e.g., 'askreddit' or 'technology')."}}, "required": ["subreddit_name"]}, "returns": [{"name": "subreddit_data", "type": "object", "description": "An object containing subreddit details including 'display_name' (string), 'subscriber_count' (integer), 'description' (string), 'created_utc' (number, UNIX timestamp), and 'is_private' (boolean)."}], "exceptions": [{"name": "SubredditNotFoundException", "description": "Thrown when the specified subreddit does not exist or is not accessible."}, {"name": "InvalidSubredditNameException", "description": "Thrown when the 'subreddit_name' parameter is empty or contains invalid characters."}], "toolkit_name": "RedditToolkit"}
{"name": "submit_post", "description": "Submit a new text post to a specified subreddit on Reddit.", "parameters": {"type": "object", "properties": {"subreddit": {"type": "string", "description": "The target subreddit's name (without the 'r/' prefix)"}, "title": {"type": "string", "description": "The title of the post (must be non-empty)"}, "selftext": {"type": "string", "description": "The body/content of the text post (must be non-empty)"}, "flair": {"type": "string", "description": "Optional flair ID or name to apply to the post"}}, "required": ["subreddit", "title", "selftext"]}, "returns": [{"name": "submission_response", "type": "object", "description": "Contains 'success' (boolean), 'post_id' (string if successful), and 'error' (string if unsuccessful)"}], "exceptions": [{"name": "InvalidSubredditException", "description": "The specified subreddit does not exist or is not accessible"}, {"name": "AuthenticationException", "description": "The Reddit API credentials are invalid or missing"}, {"name": "PostSubmissionFailed", "description": "The post failed to submit due to validation errors or API restrictions"}], "toolkit_name": "RedditToolkit"}
{"name": "retrieve_vectors", "description": "Retrieves information from a local vector storage system based on a query vector.", "parameters": {"type": "object", "properties": {"query_vector": {"type": "array", "description": "The vector used to query the storage, represented as an array of numerical values.", "items": {"type": "number", "description": "A numerical component of the query vector."}}, "top_k": {"type": "integer", "description": "The number of top results to return, ordered by similarity to the query vector."}, "index_name": {"type": "string", "description": "The name of the index or storage where the vectors are stored."}, "filter": {"type": "object", "description": "Optional filter criteria to narrow down the results. Key-value pairs where keys are field names and values are the criteria."}}, "required": ["index_name", "query_vector", "top_k"]}, "returns": [{"name": "results", "type": "array", "description": "An array of objects containing the retrieved vectors. Each object includes 'id' (string, unique identifier), 'vector' (array of numbers), and 'similarity_score' (number) indicating the match quality."}], "exceptions": [{"name": "InvalidParameterException", "description": "Thrown if the query_vector is not an array of numbers, or if top_k is not a positive integer."}, {"name": "IndexNotFoundException", "description": "Thrown if the specified index_name does not exist in the storage system."}, {"name": "InvalidFilterException", "description": "Thrown if the filter parameter is not a valid object or contains unsupported criteria."}], "toolkit_name": "RetrievalToolkit"}
{"name": "search_vectors", "description": "Performs a similarity search on a local vector storage system to retrieve the most relevant vectors based on a query vector.", "parameters": {"type": "object", "properties": {"query_vector": {"type": "array", "description": "The numerical vector used to query the storage system."}, "top_k": {"type": "integer", "description": "The number of nearest neighbors to return (default: 10)."}, "filter": {"type": "object", "description": "Optional key-value pairs to filter results by metadata attributes."}}, "required": ["query_vector"]}, "returns": [{"name": "results", "type": "array", "description": "An array of objects containing 'id' (string), 'vector' (array), and 'distance' (number) for each matching result."}], "exceptions": [{"name": "InvalidQueryVectorError", "description": "Thrown when the query_vector contains non-numeric values or invalid dimensions."}, {"name": "StorageNotInitializedError", "description": "Thrown when the vector storage system has not been properly initialized."}], "toolkit_name": "RetrievalToolkit"}
{"name": "query_vector_database", "description": "Retrieves similar vectors from a local vector storage system based on a query vector and specified parameters.", "parameters": {"type": "object", "properties": {"query_vector": {"type": "array", "description": "The numerical vector used to query similar entries in the vector database.", "items": {"type": "number", "description": "A numerical component of the query vector"}}, "database_name": {"type": "string", "description": "Name of the vector database to query. Defaults to 'default_vector_db' if not provided."}, "top_k": {"type": "integer", "description": "Number of most similar vectors to return. Must be \u22651."}, "filter": {"type": "object", "description": "Optional metadata filter to limit results (e.g., {\"category\": \"product\"})."}}, "required": ["query_vector", "top_k"]}, "returns": [{"name": "results", "type": "array", "description": "Array of objects containing retrieved vector data, similarity scores, and metadata. Each object has 'vector_id' (string), 'similarity_score' (number), and 'metadata' (object)."}], "exceptions": [{"name": "InvalidVectorException", "description": "Thrown if the query_vector contains non-numeric values or is empty."}, {"name": "DatabaseNotFoundException", "description": "Occurs when the specified database_name does not exist in the system."}, {"name": "InvalidTopKException", "description": "Raised when top_k is less than 1 or not an integer."}], "toolkit_name": "RetrievalToolkit"}
{"name": "fetch_similar_vectors", "description": "Retrieves vectors similar to a query vector from a local vector storage system based on cosine similarity.", "parameters": {"type": "object", "properties": {"query_vector": {"type": "array", "items": {"type": "number"}, "description": "The numerical vector to search against, represented as an array of numbers."}, "top_k": {"type": "integer", "description": "The maximum number of most similar vectors to return (default is 10 if omitted)."}}, "required": ["query_vector"]}, "returns": [{"name": "results", "type": "array", "description": "An array of matching vectors, each containing 'id' (string identifier), 'vector' (the retrieved numerical array), and 'distance' (a similarity score where lower is more similar)."}], "exceptions": [{"name": "InvalidVectorFormatException", "description": "The query_vector is invalid (e.g., empty, contains non-numeric values, or has incorrect dimensionality)."}], "toolkit_name": "RetrievalToolkit"}
{"name": "perform_search", "description": "Perform a web search using specified search engines like Google, DuckDuckGo, Wikipedia, Bing, Baidu, or Wolfram Alpha.", "parameters": {"type": "object", "properties": {"query": {"type": "string", "description": "The search query text."}, "engine": {"type": "string", "description": "The search engine to use (e.g., 'google', 'duckduckgo', 'wikipedia', 'bing', 'baidu', 'wolframalpha')."}, "num_results": {"type": "integer", "description": "The number of results to return. Defaults to 10 if not specified."}, "result_type": {"type": "string", "description": "The type of results to retrieve (e.g., 'web', 'news', 'images'). Defaults to 'web'."}}, "required": ["query"]}, "returns": [{"name": "results", "type": "array", "description": "An array of search results. Each result contains 'title' (string, the result's title), 'url' (string, the result's URL), and 'snippet' (string, a brief description of the result)."}], "exceptions": [{"name": "InvalidEngineException", "description": "The specified search engine is not supported or invalid."}, {"name": "SearchAPIError", "description": "An error occurred while communicating with the search engine's API (e.g., network issues, invalid response format)."}], "toolkit_name": "SearchToolkit"}
{"name": "execute_web_search", "description": "Executes a web search using specified search engines and returns organized results.", "parameters": {"type": "object", "properties": {"query": {"type": "string", "description": "The search query string."}, "engines": {"type": "array", "items": {"type": "string", "description": "Valid search engines include Google, DuckDuckGo, Wikipedia, Bing, BaiDu, and WolframAlpha."}, "description": "List of search engines to use. If omitted, defaults to all available engines."}, "num_results": {"type": "integer", "description": "Number of results to retrieve per engine (default is 10)."}}, "required": ["query"]}, "returns": [{"name": "results", "type": "array", "description": "An array of objects, each containing the search engine name and an array of results. Each result includes properties like 'title', 'link', and 'snippet'."}], "exceptions": [{"name": "InvalidEngineException", "description": "One or more specified search engines are not supported or invalid."}, {"name": "EmptyQueryException", "description": "The search query is empty or consists only of whitespace."}, {"name": "ConnectionErrorException", "description": "Failed to connect to one or more search engines due to network issues."}], "toolkit_name": "SearchToolkit"}
{"name": "search_web", "description": "Performs a web search using the specified search engine and returns results.", "parameters": {"type": "object", "properties": {"query": {"type": "string", "description": "The search query text."}, "engine": {"type": "string", "description": "The search engine to use (e.g., 'google', 'duckduckgo', 'wikipedia', 'bing', 'baidu', 'wolframalpha')."}, "num_results": {"type": "integer", "description": "Number of search results to return (default is 10 if unspecified)."}, "include_summary": {"type": "boolean", "description": "Whether to include a summary of top search results."}}, "required": ["query", "engine"]}, "returns": [{"name": "search_results", "type": "object", "description": "Contains 'results' (array of result objects with 'title', 'link', and 'snippet') and 'summary' (string) if include_summary is true."}], "exceptions": [{"name": "InvalidEngineException", "description": "The specified search engine is not supported or invalid."}, {"name": "ConnectionError", "description": "Failed to connect to the search engine's API or service is unavailable."}, {"name": "APIRateLimitExceeded", "description": "The search engine's API rate limit has been exceeded. Try again later."}], "toolkit_name": "SearchToolkit"}
{"name": "search_engine_query", "description": "Performs a web search using specified search engines and returns structured results.", "parameters": {"type": "object", "properties": {"engine": {"type": "string", "description": "The search engine to use (e.g., 'google', 'duckduckgo', 'wikipedia', 'bing', 'baidu', 'wolframalpha')."}, "query": {"type": "string", "description": "The search query terms."}, "num_results": {"type": "integer", "description": "Number of results to return (default is 10)."}, "include_summary": {"type": "boolean", "description": "Whether to include a summary of top results."}, "raw_data": {"type": "boolean", "description": "Whether to return raw HTML data instead of structured results."}}, "required": ["engine", "query"]}, "returns": [{"name": "search_results", "type": "object", "description": "An object containing: 'results' (array of objects with 'title', 'url', and 'snippet'), 'success' (boolean indicating success), and 'error_message' (string if failed)."}], "exceptions": [{"name": "InvalidEngineException", "description": "Thrown when the specified search engine is not supported or invalid."}, {"name": "ConnectionFailedException", "description": "Thrown when the search cannot be performed due to network connectivity issues."}], "toolkit_name": "SearchToolkit"}
{"name": "web_search_query", "description": "Performs a web search using specified search engines and returns structured results.", "parameters": {"type": "object", "properties": {"engine": {"type": "string", "description": "The search engine to use (e.g., 'Google', 'DuckDuckGo', 'Wikipedia', 'Bing', 'BaiDu', 'Wolfram Alpha')."}, "query": {"type": "string", "description": "The search query terms."}, "num_results": {"type": "integer", "description": "The number of search results to return (default is 10 if unspecified)."}, "include_summary": {"type": "boolean", "description": "Whether to include a brief summary of each result (default is false)."}}, "required": ["engine", "query"]}, "returns": [{"name": "results", "type": "array", "description": "An array of search results, each containing 'title' (string), 'link' (string), and 'snippet' (string if include_summary is true)."}], "exceptions": [{"name": "InvalidEngineException", "description": "Thrown when the specified search engine is not supported or incorrectly formatted."}, {"name": "ConnectionError", "description": "Thrown when the tool cannot connect to the search engine's API or service."}], "toolkit_name": "SearchToolkit"}
{"name": "fetch_academic_data", "description": "Fetches academic paper or author data from the Semantic Scholar API.", "parameters": {"type": "object", "properties": {"entity_type": {"type": "string", "description": "The type of entity to retrieve, either 'paper' or 'author'."}, "entity_id": {"type": "string", "description": "The specific ID of the paper or author to retrieve."}, "query": {"type": "string", "description": "Search query terms to find papers or authors (if entity_id is not provided)."}, "fields": {"type": "array", "items": {"type": "string", "description": "The name of a field to include in the response (e.g., 'title', 'abstract', 'citationCount')."}, "description": "An array of fields to include in the response."}}, "required": ["entity_type"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing the retrieved data. For a specific entity by ID, returns a single entity object. For a search query, returns an array of entities under 'data', along with pagination details like 'total' and 'nextPageToken'. Each entity includes fields based on the 'fields' parameter."}], "exceptions": [{"name": "InvalidEntityIdException", "description": "The provided entity_id does not exist in the Semantic Scholar database."}, {"name": "ApiRateLimitExceededException", "description": "The API rate limit has been exceeded. Please try again later."}, {"name": "InvalidQueryFormatException", "description": "The query parameter is empty or not properly formatted."}], "toolkit_name": "SemanticScholarToolkit"}
{"name": "get_academic_info", "description": "Fetches academic papers or author information from the Semantic Scholar API using identifiers or search queries.", "parameters": {"type": "object", "properties": {"paper_id": {"type": "string", "description": "The unique identifier of the paper to retrieve."}, "author_id": {"type": "string", "description": "The unique identifier of the author to retrieve."}, "query": {"type": "string", "description": "A search query term for finding papers or authors (e.g., keywords, titles)."}, "fields": {"type": "array", "description": "List of fields to include in the response (e.g., 'title', 'abstract', 'citationCount').", "items": {"type": "string", "description": "Field names to include in the response."}}}, "required": []}, "returns": [{"name": "data", "type": "object", "description": "The requested academic data. For papers, includes fields like title, abstract, authors, and citations. For authors, includes their name, papers, and affiliations. If a query is used, returns a list of matching results."}], "exceptions": [{"name": "InvalidInputException", "description": "Thrown if no valid identifier (paper_id/author_id) or query is provided, or if the provided ID is invalid."}, {"name": "APIUnavailableException", "description": "Thrown if the Semantic Scholar API is unreachable, returns an error, or the request is rate-limited."}], "toolkit_name": "SemanticScholarToolkit"}
{"name": "retrieve_paper_details", "description": "Fetch detailed information about an academic paper and its authors from the Semantic Scholar API using a paper ID.", "parameters": {"type": "object", "properties": {"id": {"type": "string", "description": "The unique identifier of the paper to retrieve."}, "fields": {"type": "array", "description": "An array of fields to include in the response (e.g., 'title', 'abstract', 'authors', 'citationCount').", "items": {"type": "string", "description": "Field names supported by the Semantic Scholar API."}}, "include_citations": {"type": "boolean", "description": "Whether to include detailed citation information for the paper."}}, "required": ["id", "fields"]}, "returns": [{"name": "paper_data", "type": "object", "description": "An object containing the requested fields for the paper, such as title, abstract, authors, or citation details."}, {"name": "error", "type": "string", "description": "An error message if the paper ID is invalid or fields are unsupported."}], "exceptions": [{"name": "PaperNotFoundException", "description": "Thrown when the provided paper ID does not correspond to any known academic paper."}, {"name": "InvalidFieldException", "description": "Thrown when one or more fields in the 'fields' parameter are not valid for the Semantic Scholar API."}], "toolkit_name": "SemanticScholarToolkit"}
{"name": "get_semantic_scholar_data", "description": "Fetches data for a specific paper or author from Semantic Scholar using their unique identifier.", "parameters": {"type": "object", "properties": {"id": {"type": "string", "description": "The unique identifier (ID) of the paper or author."}, "type": {"type": "string", "description": "The type of entity to retrieve, must be either 'paper' or 'author'."}, "fields": {"type": "array", "description": "A list of specific fields to include in the response. If omitted, returns all available fields.", "items": {"type": "string", "description": "A specific field name to include."}}}, "required": ["id", "type"]}, "returns": [{"name": "data", "type": "object", "description": "The retrieved data for the specified paper or author, including fields such as title, abstract, authors, citations, etc., depending on the type and fields requested. Returns an empty object if no data is found."}], "exceptions": [{"name": "InvalidRequestException", "description": "The 'id' is invalid or empty, or the 'type' parameter is not 'paper' or 'author'."}, {"name": "APIErrorException", "description": "An error occurred while communicating with the Semantic Scholar API."}], "toolkit_name": "SemanticScholarToolkit"}
{"name": "create_channel", "description": "Create a new Slack channel.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "The name of the channel to create."}, "is_private": {"type": "boolean", "description": "Whether the channel should be private. Defaults to false."}, "team_id": {"type": "string", "description": "The Slack team ID. Optional if the current team context is already set."}}, "required": ["name"]}, "returns": [{"name": "result", "type": "object", "description": "An object with 'success' (boolean), 'channel_id' (string if successful), and 'error_message' (string if not successful)."}], "exceptions": [{"name": "InvalidChannelNameException", "description": "The channel name is invalid (e.g., contains unsupported characters) or already exists."}, {"name": "SlackAPIException", "description": "An error occurred while interacting with the Slack API, such as authentication failure or rate limiting."}], "toolkit_name": "SlackToolkit"}
{"name": "join_channel", "description": "Joins a user to a specified Slack channel.", "parameters": {"type": "object", "properties": {"channel": {"type": "string", "description": "The name or ID of the Slack channel to join."}, "user_token": {"type": "string", "description": "(Optional) The user's authentication token. Defaults to the current session's token if omitted."}}, "required": ["channel"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean), 'channel_id' (string, the channel's unique ID if joined), and 'error_message' (string, details if unsuccessful)."}], "exceptions": [{"name": "InvalidChannelException", "description": "The specified channel does not exist or is invalid."}, {"name": "AccessDeniedException", "description": "The user lacks permission to join the channel or the token is invalid."}], "toolkit_name": "SlackToolkit"}
{"name": "add_member_to_channel", "description": "Adds a user to a Slack channel by user ID.", "parameters": {"type": "object", "properties": {"channel_id": {"type": "string", "description": "The unique identifier of the Slack channel."}, "user_id": {"type": "string", "description": "The unique identifier of the user to add to the channel."}}, "required": ["channel_id", "user_id"]}, "returns": [{"name": "result", "type": "object", "description": "An object with 'success' (boolean indicating operation result) and 'error_message' (string explaining failure cause, if any)."}], "exceptions": [{"name": "InvalidChannelException", "description": "The provided channel ID is invalid or does not exist in Slack."}, {"name": "UserNotFoundException", "description": "The provided user ID does not correspond to an existing Slack user."}, {"name": "PermissionDeniedException", "description": "The authenticated user lacks permission to add members to the specified channel."}], "toolkit_name": "SlackToolkit"}
{"name": "remove_member_from_channel", "description": "Remove a member from a Slack channel.", "parameters": {"type": "object", "properties": {"channel_id": {"type": "string", "description": "The ID of the Slack channel."}, "user_id": {"type": "string", "description": "The user ID of the member to remove."}}, "required": ["channel_id", "user_id"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean indicating if removal was successful), and 'error_message' (string if unsuccessful)."}], "exceptions": [{"name": "SlackOperationException", "description": "Either the channel_id or user_id is invalid, the channel does not exist, or the user is not a member of the channel."}], "toolkit_name": "SlackToolkit"}
{"name": "list_channel_members", "description": "Lists all members of a specific Slack channel.", "parameters": {"type": "object", "properties": {"channel_id": {"type": "string", "description": "The unique identifier of the Slack channel."}, "limit": {"type": "integer", "description": "Maximum number of members to return (default is 200)."}, "cursor": {"type": "string", "description": "Pagination cursor for retrieving the next page of results."}}, "required": ["channel_id"]}, "returns": [{"name": "response", "type": "object", "description": "An object containing 'members' (array of user objects in the channel), 'next_cursor' (string for pagination), and 'has_more' (boolean indicating if there are more results)."}], "exceptions": [{"name": "InvalidChannelException", "description": "The specified 'channel_id' is invalid or does not exist."}, {"name": "PermissionDeniedException", "description": "The user does not have permission to view the channel's members."}], "toolkit_name": "SlackToolkit"}
{"name": "create_charge", "description": "Creates a new charge for a customer's payment using Stripe.", "parameters": {"type": "object", "properties": {"amount": {"type": "integer", "description": "The amount to charge in cents (e.g., 100 = $1.00)."}, "currency": {"type": "string", "description": "The currency code (e.g., 'usd' for US dollars)."}, "source": {"type": "string", "description": "The payment source token (e.g., a credit card token)."}, "description": {"type": "string", "description": "An optional description of the charge (e.g., 'Monthly subscription fee')."}}, "required": ["amount", "currency", "source"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean), 'charge_id' (string, Stripe's unique charge identifier if successful), and 'error' (string, error details if unsuccessful)."}], "exceptions": [{"name": "InvalidChargeException", "description": "Thrown if the charge parameters are invalid (e.g., invalid amount, currency, or source) or the Stripe API rejects the request."}], "toolkit_name": "StripeToolkit"}
{"name": "solve_equation", "description": "Solve an algebraic equation for a specified variable using SymPy.", "parameters": {"type": "object", "properties": {"equation": {"type": "string", "description": "The algebraic equation to solve, e.g., 'x**2 + 2*x - 1 = 0'."}, "variable": {"type": "string", "description": "The variable to solve for, e.g., 'x'."}}, "required": ["equation", "variable"]}, "returns": [{"name": "solutions", "type": "array", "description": "A list of solutions as strings. Each element represents a solution, e.g., ['x = 1', 'x = -1']. If no solution is found, returns an empty list."}], "exceptions": [{"name": "InvalidEquationException", "description": "The equation is malformed or cannot be parsed by SymPy."}, {"name": "VariableNotFoundException", "description": "The variable specified is not present in the equation."}], "toolkit_name": "SymPyToolkit"}
{"name": "differentiate_expression", "description": "Compute the derivative of a mathematical expression with respect to a variable.", "parameters": {"type": "object", "properties": {"expression": {"type": "string", "description": "The mathematical expression to differentiate."}, "variable": {"type": "string", "description": "The variable with respect to which to differentiate."}, "order": {"type": "integer", "description": "The order of the derivative (must be a positive integer). Defaults to 1."}}, "required": ["expression", "variable"]}, "returns": [{"name": "derivative", "type": "string", "description": "The resulting derivative expression as a string."}], "exceptions": [{"name": "InvalidExpressionException", "description": "The provided expression is invalid or cannot be parsed by SymPy."}, {"name": "VariableNotFoundException", "description": "The specified variable is not valid or not present in the expression."}, {"name": "InvalidOrderException", "description": "The order parameter is not a positive integer."}], "toolkit_name": "SymPyToolkit"}
{"name": "simplify_expression", "description": "Simplifies a symbolic mathematical expression using SymPy's simplification algorithms.", "parameters": {"type": "object", "properties": {"expression": {"type": "string", "description": "The mathematical expression to simplify (e.g., 'sin(x)^2 + cos(x)^2')."}, "trig": {"type": "boolean", "description": "Optional flag to enable trigonometric simplifications. Defaults to false."}}, "required": ["expression"]}, "returns": [{"name": "simplified_expression", "type": "string", "description": "The simplified version of the input expression as a string."}], "exceptions": [{"name": "InvalidExpressionException", "description": "Thrown when the input expression is invalid or cannot be parsed by SymPy."}], "toolkit_name": "SymPyToolkit"}
{"name": "integrate_expression", "description": "Perform symbolic integration of a mathematical expression.", "parameters": {"type": "object", "properties": {"expression": {"type": "string", "description": "The mathematical expression to integrate (e.g., 'x**2 + 3*x')."}, "variable": {"type": "string", "description": "The variable with respect to which the integration is performed (e.g., 'x')."}, "lower_limit": {"type": "number", "description": "The lower bound for definite integration (e.g., 0)."}, "upper_limit": {"type": "number", "description": "The upper bound for definite integration (e.g., 5)."}}, "required": ["expression", "variable"]}, "returns": [{"name": "integrated_expression", "type": "string", "description": "The result of the integration as a string."}], "exceptions": [{"name": "InvalidExpressionException", "description": "The provided expression could not be parsed as a valid mathematical expression."}, {"name": "InvalidVariableException", "description": "The variable specified is invalid or not present in the expression."}, {"name": "IncompleteIntegrationLimitsException", "description": "Both lower and upper limits must be provided for definite integration."}, {"name": "IntegrationFailedException", "description": "The integration could not be computed due to mathematical limitations."}], "toolkit_name": "SymPyToolkit"}
{"name": "invert_matrix", "description": "Compute the inverse of a matrix using SymPy.", "parameters": {"type": "object", "properties": {"matrix": {"type": "array", "description": "The matrix to invert, represented as a 2D array of numbers.", "items": {"type": "array", "items": {"type": "number", "description": "A numerical element of the matrix."}}}}, "required": ["matrix"]}, "returns": [{"name": "inverse_matrix", "type": "array", "description": "The inverse matrix as a 2D array of numbers if the input is invertible."}], "exceptions": [{"name": "NonSquareMatrixError", "description": "Thrown when the input matrix is not square (number of rows does not equal number of columns)."}, {"name": "SingularMatrixError", "description": "Thrown when the input matrix is singular (determinant is zero) and cannot be inverted."}], "toolkit_name": "SymPyToolkit"}
{"name": "search_files", "description": "Searches for files by name or content across specified directories.", "parameters": {"type": "object", "properties": {"query": {"type": "string", "description": "The term to search for (filename or content substring)."}, "search_type": {"type": "string", "description": "Specify 'name' to search filenames or 'content' to search file contents."}, "directories": {"type": "array", "items": {"type": "string", "description": "Path of a directory to search in."}, "description": "List of directories to search (defaults to current directory if omitted)"}, "case_sensitive": {"type": "boolean", "description": "Whether the search should be case-sensitive (defaults to false)."}}, "required": ["query", "search_type"]}, "returns": [{"name": "files", "type": "array", "description": "List of absolute file paths matching the search criteria. Each entry is a string."}], "exceptions": [{"name": "InvalidSearchTypeException", "description": "Thrown when 'search_type' is not 'name' or 'content'"}, {"name": "DirectoryAccessException", "description": "Thrown when any directory in 'directories' cannot be accessed"}], "toolkit_name": "TerminalToolkit"}
{"name": "execute_shell_command", "description": "Executes a shell command and returns its output, exit code, and error stream.", "parameters": {"type": "object", "properties": {"command": {"type": "string", "description": "The shell command to execute."}, "timeout": {"type": "number", "description": "Optional timeout in seconds for the command execution."}, "working_directory": {"type": "string", "description": "The directory to execute the command in. Defaults to the current working directory if omitted."}}, "required": ["command"]}, "returns": [{"name": "command_result", "type": "object", "description": "An object containing 'output' (string), 'exit_code' (integer), and 'error_message' (string) from the executed command."}], "exceptions": [{"name": "InvalidCommandException", "description": "Thrown if the 'command' parameter is empty or contains invalid syntax that prevents execution."}, {"name": "CommandTimeoutException", "description": "Thrown if the command execution exceeds the specified 'timeout' duration."}], "toolkit_name": "TerminalToolkit"}
{"name": "kill_terminal_process", "description": "Terminates a terminal process by its process ID (PID).", "parameters": {"type": "object", "properties": {"pid": {"type": "integer", "description": "The process ID of the target terminal process."}, "force": {"type": "boolean", "description": "Whether to force-terminate the process (e.g., using SIGKILL instead of SIGTERM)."}}, "required": ["pid"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean, indicates termination success), 'message' (string, details like 'Process terminated' or error reason), and 'pid' (integer, the PID of the target process)."}], "exceptions": [{"name": "InvalidPIDException", "description": "The provided PID is not a valid integer or does not correspond to an active process."}, {"name": "ProcessTerminationFailedException", "description": "The process could not be terminated, even with force termination enabled (e.g., insufficient permissions or system error)."}], "toolkit_name": "TerminalToolkit"}
{"name": "list_terminal_sessions", "description": "Lists terminal sessions across different operating systems, filtered by user, activity status, or OS type.", "parameters": {"type": "object", "properties": {"user": {"type": "string", "description": "The username to filter sessions by. Defaults to the current user if not provided."}, "active_only": {"type": "boolean", "description": "Whether to list only active sessions. Defaults to true."}, "os_type": {"type": "string", "description": "The operating system type to filter sessions by (e.g., 'linux', 'windows', 'mac')."}}, "required": []}, "returns": [{"name": "sessions", "type": "array", "description": "An array of session objects. Each object contains 'session_id' (string), 'user' (string), 'os_type' (string), 'status' (string), and 'start_time' (number, Unix timestamp)."}], "exceptions": [{"name": "AccessDeniedException", "description": "The user does not have permission to list sessions for the specified user or OS type."}, {"name": "InvalidParameterException", "description": "The provided OS type is invalid or not supported."}], "toolkit_name": "TerminalToolkit"}
{"name": "create_terminal_session", "description": "Create a new terminal session on a specified operating system with optional initial commands and settings.", "parameters": {"type": "object", "properties": {"os_type": {"type": "string", "description": "Target operating system type (e.g., 'linux', 'windows', 'mac')."}, "command": {"type": "string", "description": "Initial command to execute in the new terminal session."}, "working_directory": {"type": "string", "description": "Directory path where the session should start (defaults to user's home directory)."}, "persistent": {"type": "boolean", "description": "Whether the session remains active after command execution (default false)."}}, "required": ["os_type", "command"]}, "returns": [{"name": "session_id", "type": "string", "description": "Unique identifier for the newly created terminal session."}, {"name": "status", "type": "boolean", "description": "Indicates if the session was successfully created."}], "exceptions": [{"name": "InvalidOSTypeException", "description": "Specified 'os_type' is not supported or invalid."}, {"name": "CommandExecutionException", "description": "The initial 'command' failed to execute due to syntax errors or permissions."}, {"name": "PathNotFoundException", "description": "The 'working_directory' path does not exist on the target system."}], "toolkit_name": "TerminalToolkit"}
{"name": "analyze_video", "description": "Analyze a video to extract frames and answer questions about its content.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The path to the video file."}, "start_time": {"type": "number", "description": "The start time in seconds for frame extraction. Defaults to 0 if not provided."}, "end_time": {"type": "number", "description": "The end time in seconds for frame extraction. Defaults to the video's duration if not provided."}, "interval": {"type": "number", "description": "The interval in seconds between extracted frames. If provided, frames will be extracted at this interval between start and end times."}, "question": {"type": "string", "description": "The question to be answered about the video content."}}, "required": ["video_path"]}, "returns": [{"name": "result", "type": "object", "description": "Contains analysis results including 'success' (boolean), 'error_message' (string), 'frames' (array of extracted frame paths), and 'answer' (string if a question was provided)."}], "exceptions": [{"name": "InvalidVideoPathException", "description": "The provided video path is invalid or inaccessible."}, {"name": "InvalidTimeRangeException", "description": "The start_time exceeds end_time or negative values are provided."}, {"name": "AnalysisFailedException", "description": "The analysis could not be completed due to an internal error or model failure."}], "toolkit_name": "VideoAnalysisToolkit"}
{"name": "extract_video_frames", "description": "Extracts individual frames from a video file at specified intervals.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The file path to the input video file."}, "output_directory": {"type": "string", "description": "Directory path where extracted frames will be saved."}, "frame_interval": {"type": "number", "description": "Number of seconds between extracted frames (default: 1.0)."}, "start_time": {"type": "number", "description": "Start time in seconds from which extraction begins (default: 0)."}, "end_time": {"type": "number", "description": "End time in seconds where extraction stops (default: video duration)."}}, "required": ["video_path", "output_directory"]}, "returns": [{"name": "result", "type": "object", "description": "Contains 'output_directory' (string), 'frame_paths' (array of strings containing paths to extracted frames), and 'success' (boolean indicating operation completion)."}], "exceptions": [{"name": "InvalidVideoPathException", "description": "Thrown when the input video file path is invalid or inaccessible."}, {"name": "OutputDirectoryException", "description": "Thrown when the output directory is invalid or not writeable."}, {"name": "FrameIntervalException", "description": "Thrown when frame_interval is <= 0 or causes invalid frame timing."}], "toolkit_name": "VideoAnalysisToolkit"}
{"name": "summarize_video_content", "description": "Generate a textual summary of the video content using vision-language models.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The file path or URL of the video to be summarized."}, "start_time": {"type": "number", "description": "Optional. The starting timestamp (in seconds) from which to begin the summary analysis."}, "end_time": {"type": "number", "description": "Optional. The ending timestamp (in seconds) up to which the summary analysis is performed."}, "language": {"type": "string", "description": "Optional. The language code (e.g., 'en', 'es') for the output summary text."}}, "required": ["video_path"]}, "returns": [{"name": "summary", "type": "string", "description": "A concise text summary of the video content based on visual and contextual analysis."}, {"name": "confidence_score", "type": "number", "description": "A value between 0 and 1 indicating the model's confidence in the summary's accuracy."}], "exceptions": [{"name": "InvalidVideoPathException", "description": "Thrown when the provided video path is invalid, inaccessible, or not a valid video format."}, {"name": "ProcessingErrorException", "description": "Thrown if the video content cannot be analyzed due to technical issues or unsupported features."}], "toolkit_name": "VideoAnalysisToolkit"}
{"name": "detect_objects_in_video", "description": "Detects objects within video frames using a vision-language model and returns their locations and confidence scores.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "Path to the input video file."}, "frame_rate": {"type": "integer", "description": "Number of frames to analyze per second (default is 1)."}, "confidence_threshold": {"type": "number", "description": "Minimum confidence score (between 0.0 and 1.0) required for an object detection to be considered valid."}}, "required": ["video_path", "confidence_threshold"]}, "returns": [{"name": "detected_objects", "type": "array", "description": "An array of objects detected in the video. Each entry contains 'frame_number' (integer), 'object_name' (string), and 'confidence' (number)."}], "exceptions": [{"name": "VideoPathNotFoundException", "description": "The specified video path does not exist or is inaccessible."}, {"name": "InvalidConfidenceThresholdException", "description": "The confidence_threshold parameter is not a valid number between 0.0 and 1.0."}], "toolkit_name": "VideoAnalysisToolkit"}
{"name": "search_video_content", "description": "Searches a video for specific content based on a text query and returns timestamps and relevant frames.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The file path or URL of the video to analyze."}, "query": {"type": "string", "description": "The text query to search for in the video content (e.g., 'person opening a door')."}, "confidence_threshold": {"type": "number", "description": "Minimum confidence score (0.0-1.0) required to consider a match valid. Defaults to 0.7."}, "max_results": {"type": "integer", "description": "Maximum number of results to return. Defaults to 10."}}, "required": ["video_path", "query"]}, "returns": [{"name": "matches", "type": "array", "description": "Array of objects containing timestamp (seconds), frame index, and confidence score for each matched occurrence."}], "exceptions": [{"name": "InvalidVideoPathException", "description": "The specified video file path/URL is inaccessible or not a valid video format."}, {"name": "EmptyQueryException", "description": "The 'query' parameter was an empty string or lacks semantic content to search."}], "toolkit_name": "VideoAnalysisToolkit"}
{"name": "download_video", "description": "Download a video from a supported service and optionally split it into chunks.", "parameters": {"type": "object", "properties": {"url": {"type": "string", "description": "The URL of the video to download."}, "save_path": {"type": "string", "description": "The local path where the downloaded video (or chunks) will be saved."}, "chunk_duration": {"type": "number", "description": "The duration of each chunk in seconds (if splitting is desired)."}, "output_format": {"type": "string", "description": "The desired output format (e.g., 'mp4', 'avi')."}, "include_subtitles": {"type": "boolean", "description": "Whether to include subtitles if available."}}, "required": ["url", "save_path"]}, "returns": [{"name": "result", "type": "object", "description": "Contains 'success' (boolean), 'output_path' (string path of the downloaded file), 'chunks' (array of paths if split), and 'error' (string if any error occurred)."}], "exceptions": [{"name": "InvalidURLException", "description": "The provided URL is invalid or not supported by the service."}, {"name": "DownloadFailedException", "description": "The download could not be completed due to network issues or service errors."}, {"name": "UnsupportedServiceException", "description": "The video service corresponding to the URL is not supported by the toolkit."}], "toolkit_name": "VideoDownloaderToolkit"}
{"name": "download_and_split_video", "description": "Downloads a video from a supported service and optionally splits it into chunks based on specified duration.", "parameters": {"type": "object", "properties": {"video_url": {"type": "string", "description": "The URL of the video to download."}, "service": {"type": "string", "description": "Optional name of the video service (e.g., 'youtube', 'vimeo'). If omitted, inferred from URL."}, "save_path": {"type": "string", "description": "The local path where the downloaded video will be saved."}, "split_video": {"type": "boolean", "description": "Whether to split the video into chunks after downloading. Defaults to false."}, "chunk_size_seconds": {"type": "number", "description": "The duration of each chunk in seconds. Required if split_video is true."}}, "required": ["video_url", "save_path"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean), 'video_path' (string, path to downloaded video), 'chunks' (array of strings, paths to split chunks if applicable), and 'error_message' (string if any error occurred)."}], "exceptions": [{"name": "InvalidURLException", "description": "The provided video URL is invalid or cannot be parsed."}, {"name": "UnsupportedServiceException", "description": "The video service is not supported by this tool."}, {"name": "DownloadFailedException", "description": "The download process failed, possibly due to network issues or server errors."}, {"name": "InvalidChunkSizeException", "description": "The specified chunk size is invalid (e.g., negative or too small)."}], "toolkit_name": "VideoDownloaderToolkit"}
{"name": "split_video_into_chunks", "description": "Splits a downloaded video file into smaller chunks of specified duration.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The local file path of the video to split."}, "chunk_duration_seconds": {"type": "number", "description": "The duration (in seconds) of each chunk. Can be a decimal for fractions of a second."}, "output_directory": {"type": "string", "description": "The directory path where the video chunks will be saved."}}, "required": ["video_path", "chunk_duration_seconds", "output_directory"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean), 'chunk_paths' (array of string paths to each created chunk), and 'error_message' (string if any error occurred)."}], "exceptions": [{"name": "InvalidVideoPathException", "description": "The specified video file path does not exist or is inaccessible."}, {"name": "InvalidDurationException", "description": "The chunk duration is not a positive number (e.g., negative or zero)."}, {"name": "OutputDirectoryException", "description": "The output directory is invalid, does not exist, or is not writable."}], "toolkit_name": "VideoDownloaderToolkit"}
{"name": "get_current_weather", "description": "Fetches the current weather data for a specified city using the OpenWeatherMap API.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The name of the city to fetch weather data for."}, "api_key": {"type": "string", "description": "The OpenWeatherMap API key required for authentication."}, "units": {"type": "string", "description": "The units for temperature and speed (either 'metric' or 'imperial')."}}, "required": ["city", "api_key"]}, "returns": [{"name": "weather_data", "type": "object", "description": "An object containing weather details such as temperature (number), humidity (integer), wind_speed (number), weather_description (string), and units (string indicating the unit system used)."}], "exceptions": [{"name": "InvalidAPIKeyException", "description": "Thrown when the provided API key is invalid or not authorized to access the OpenWeatherMap API."}, {"name": "CityNotFoundException", "description": "Thrown when the specified city cannot be found in the OpenWeatherMap database."}], "toolkit_name": "WeatherToolkit"}
{"name": "get_weather_forecast", "description": "Fetches a 5-day weather forecast for a specified city using the OpenWeatherMap API.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The name of the city to retrieve the forecast for."}, "days": {"type": "integer", "description": "Number of days to include in the forecast (default is 5)."}}, "required": ["city"]}, "returns": [{"name": "forecast", "type": "array", "description": "Array of daily weather forecasts. Each item contains 'day' (date string), 'min_temp' (float), 'max_temp' (float), and 'conditions' (string describing weather conditions)."}], "exceptions": [{"name": "InvalidCityException", "description": "The specified city could not be found in the OpenWeatherMap database."}, {"name": "ServiceUnavailableException", "description": "The OpenWeatherMap API is temporarily unavailable or returned an unexpected response."}], "toolkit_name": "WeatherToolkit"}
{"name": "get_weather_alerts", "description": "Fetch active weather alerts for a specified city and country using the OpenWeatherMap API.", "parameters": {"type": "object", "properties": {"city": {"type": "string", "description": "The name of the city to check for weather alerts."}, "country": {"type": "string", "description": "The two-letter country code (e.g., US, GB) associated with the city."}}, "required": ["city", "country"]}, "returns": [{"name": "alerts", "type": "array", "description": "A list of weather alerts containing details like type, description, regions affected, and severity."}], "exceptions": [{"name": "InvalidLocationException", "description": "Thrown when the specified city and country combination is not found in the OpenWeatherMap database."}, {"name": "ApiRateLimitException", "description": "Thrown when the API rate limit is exceeded for the current session."}], "toolkit_name": "WeatherToolkit"}
{"name": "send_message", "description": "Send a text message via WhatsApp Business API.", "parameters": {"type": "object", "properties": {"recipient_phone": {"type": "string", "description": "Recipient's phone number including country code (e.g., +1234567890)."}, "message_text": {"type": "string", "description": "The text content of the message to send."}, "template_name": {"type": "string", "description": "Name of a pre-approved WhatsApp message template (optional)."}, "media_url": {"type": "string", "description": "URL or local path to media file (e.g., image or document) to include (optional)."}}, "required": ["recipient_phone", "message_text"]}, "returns": [{"name": "result", "type": "object", "description": "An object containing 'success' (boolean), 'message_id' (string, if successful), and 'error_message' (string, if unsuccessful)."}], "exceptions": [{"name": "InvalidPhoneNumberException", "description": "The 'recipient_phone' parameter is missing, invalid, or lacks a valid country code."}, {"name": "EmptyMessageException", "description": "The 'message_text' parameter is empty or only contains whitespace."}], "toolkit_name": "WhatsAppToolkit"}
{"name": "manage_business_profile", "description": "Retrieves or updates the WhatsApp Business profile information, including business category, description, and profile image.", "parameters": {"type": "object", "properties": {"action": {"type": "string", "description": "The action to perform: 'GET' to retrieve profile details or 'UPDATE' to modify the profile."}, "new_description": {"type": "string", "description": "Optional new description for the business profile when action is 'UPDATE'."}, "new_profile_image_path": {"type": "string", "description": "Optional local path of the new profile image file when action is 'UPDATE'."}}, "required": ["action"]}, "returns": [{"name": "profile_data", "type": "object", "description": "Business profile details including category, description, profile image URL, and other metadata."}, {"name": "update_status", "type": "object", "description": "Contains 'success' (boolean), 'changes_made' (array of fields updated), and 'error_message' (string if applicable)."}], "exceptions": [{"name": "InvalidProfileActionException", "description": "Thrown when 'action' parameter is not 'GET' or 'UPDATE', or when required parameters are missing for the specified action."}, {"name": "ProfileUpdateFailedException", "description": "Occurs if the profile update fails due to invalid image format, file path errors, or API restrictions."}], "toolkit_name": "WhatsAppToolkit"}
{"name": "create_message_template", "description": "Create a new message template in WhatsApp Business API for structured messages.", "parameters": {"type": "object", "properties": {"name": {"type": "string", "description": "Unique name/ID for the message template."}, "language": {"type": "string", "description": "Language code (e.g., 'en' for English) for the template."}, "category": {"type": "string", "description": "Category of the template (e.g., 'MARKETING', 'UTILITY')."}, "parts": {"type": "array", "description": "Array of message components (text, buttons, etc.).", "items": {"type": "object", "properties": {"type": {"type": "string", "description": "Component type (e.g., 'text', 'button')."}, "text": {"type": "string", "description": "Text content for the component."}}}}, "example_parameters": {"type": "object", "description": "Example parameters to demonstrate template variables."}}, "required": ["name", "language", "category", "parts"]}, "returns": [{"name": "template_status", "type": "object", "description": "Contains 'status' (string: 'success'/'failed'), 'template_id' (string if successful), and 'error_details' (string if failed)."}], "exceptions": [{"name": "TemplateValidationException", "description": "Invalid template structure (e.g., missing required fields, invalid component types)."}, {"name": "DuplicateTemplateNameException", "description": "A template with the same name already exists in the specified language."}], "toolkit_name": "WhatsAppToolkit"}
{"name": "get_message_status", "description": "Check the delivery and read status of a sent WhatsApp message using its message ID.", "parameters": {"type": "object", "properties": {"message_id": {"type": "string", "description": "The unique identifier of the message to check status for."}}, "required": ["message_id"]}, "returns": [{"name": "status_info", "type": "object", "description": "An object containing 'status' (string: 'pending'|'delivered'|'read'|'failed'), 'last_updated' (ISO 8601 timestamp of last status change), and 'error_details' (string, present only if status is 'failed')."}], "exceptions": [{"name": "InvalidMessageIDException", "description": "The provided message_id is invalid, does not exist in the system, or corresponds to a message not sent by this business account."}], "toolkit_name": "WhatsAppToolkit"}
{"name": "list_message_templates", "description": "Retrieve a list of message templates from the WhatsApp Business API, filtered by optional parameters.", "parameters": {"type": "object", "properties": {"status": {"type": "string", "description": "Filter templates by their approval status (e.g., 'approved', 'draft')."}, "template_type": {"type": "string", "description": "Filter templates by their type (e.g., 'text', 'button', 'media')."}, "category": {"type": "string", "description": "Filter templates by their category (e.g., 'marketing', 'utility')."}, "limit": {"type": "integer", "description": "Maximum number of templates to return (default: 20)."}, "offset": {"type": "integer", "description": "Pagination offset for results (default: 0)."}}, "required": []}, "returns": [{"name": "templates", "type": "array", "description": "Array of message templates, each containing 'template_name', 'namespace', 'status', and 'creation_time'."}, {"name": "total_count", "type": "integer", "description": "Total number of templates available matching the filters."}], "exceptions": [{"name": "InvalidParameterException", "description": "Thrown if any parameter has an invalid value (e.g., unknown status or type)."}, {"name": "AuthenticationException", "description": "Thrown if the API credentials are invalid or missing."}], "toolkit_name": "WhatsAppToolkit"}
{"name": "execute_zapier_action", "description": "Executes a Zapier NLA API action based on a natural language command to automate workflows.", "parameters": {"type": "object", "properties": {"command": {"type": "string", "description": "The natural language command describing the desired Zapier action (e.g., 'create a Google Calendar event')."}, "options": {"type": "object", "description": "Optional parameters for the Zapier API request", "properties": {"timeout": {"type": "number", "description": "Maximum time in seconds to wait for API response"}, "parameters": {"type": "object", "description": "Additional key-value pairs to pass to the Zapier action"}}}}, "required": ["command"]}, "returns": [{"name": "response", "type": "object", "description": "API response containing 'data' (result of the action), 'status' (HTTP status code), and 'error' (error details if failed)"}], "exceptions": [{"name": "InvalidCommandException", "description": "The natural language command is malformed or cannot be mapped to a valid Zapier action"}, {"name": "APIRequestFailed", "description": "Zapier API returned an error (e.g., authentication failed, invalid parameters)"}], "toolkit_name": "ZapierToolkit"}
{"name": "invoke_zapier_workflow", "description": "Executes a Zapier workflow using natural language commands to trigger specific actions and automate tasks across integrated apps.", "parameters": {"type": "object", "properties": {"command": {"type": "string", "description": "Natural language instruction describing the desired Zapier action (e.g., 'Create a Google Calendar event for tomorrow at 10 AM')."}, "parameters": {"type": "object", "description": "Optional custom parameters to override values in the natural language command (e.g., {\"event_time\": \"14:00\"})."}, "zap_id": {"type": "string", "description": "Unique identifier of a specific Zap to execute (optional for predefined workflows)."}}, "required": ["command"]}, "returns": [{"name": "execution_result", "type": "object", "description": "Contains 'status' (string: success/failure), 'zap_response' (raw API response data), and 'error_details' (if applicable)."}], "exceptions": [{"name": "AmbiguousCommandException", "description": "The natural language command could not be mapped to a specific Zapier action or app."}, {"name": "ZapierAPIException", "description": "Error occurred during communication with Zapier's NLA API (e.g., authentication failure, rate limit exceeded)."}], "toolkit_name": "ZapierToolkit"}
{"name": "parse_natural_language_action", "description": "Parses natural language commands into structured actions compatible with Zapier's NLA API for workflow automation.", "parameters": {"type": "object", "properties": {"command": {"type": "string", "description": "The natural language instruction to parse (e.g., 'Send an email to John about the meeting')."}, "user_id": {"type": "string", "description": "(Optional) Unique identifier for the user associated with the command."}, "context": {"type": "object", "description": "(Optional) Additional metadata to refine the parsing (e.g., {'account': 'work', 'priority': 'high'})."}}, "required": ["command"]}, "returns": [{"name": "structured_action", "type": "object", "description": "Parsed action containing 'action_type' (string), 'parameters' (object), and 'confidence_score' (number between 0-1 indicating parsing certainty)."}, {"name": "error_details", "type": "object", "description": "Error information if parsing failed, containing 'code' (string) and 'message' (string)."}], "exceptions": [{"name": "AmbiguousCommandException", "description": "Thrown when the natural language command cannot be unambiguously mapped to a specific Zapier action."}, {"name": "UnsupportedActionException", "description": "Thrown when the command refers to an action not supported by the user's Zapier account or NLA API."}], "toolkit_name": "ZapierToolkit"}
{"name": "create_zapier_nla_workflow", "description": "Create a Zapier workflow using a natural language command to define triggers and actions.", "parameters": {"type": "object", "properties": {"natural_language_command": {"type": "string", "description": "A natural language description of the workflow (e.g., 'When a new email arrives in Gmail, send a Slack notification')."}, "auth_token": {"type": "string", "description": "The user's authentication token for accessing Zapier's NLA API."}}, "required": ["natural_language_command", "auth_token"]}, "returns": [{"name": "workflow_status", "type": "object", "description": "An object containing 'success' (boolean), 'workflow_id' (string, if created), and 'error_details' (string, if failed)."}], "exceptions": [{"name": "InvalidCommandFormatException", "description": "The natural language command is malformed or cannot be parsed into a valid Zapier workflow structure."}, {"name": "AuthenticationFailureException", "description": "The provided auth_token is invalid or lacks sufficient permissions to create workflows via the Zapier NLA API."}], "toolkit_name": "ZapierToolkit"}
